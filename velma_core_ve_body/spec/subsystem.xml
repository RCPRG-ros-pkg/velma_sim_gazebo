<subsystem_definition>

    <buffers>
        <in alias="hi_cmd"          type="velma_core_cs_ve_body_msgs::Command"  side="top"/>
        <out alias="hi_st"          type="velma_core_cs_ve_body_msgs::Status"   side="top"/>
        <in alias="lo_ec_st"        type="velma_ec_gen_msgs::EcInput"           side="bottom"   converter="velma_ec_gen_msgs::EcInputBufferConverter"/>
        <out alias="lo_ec_cmd"      type="velma_ec_gen_msgs::EcOutput"          side="bottom"   converter="velma_ec_gen_msgs::EcOutputBufferConverter"/>
        <in alias="lo_rLwr_st"      type="velma_core_ve_re_lwr_msgs::Status"    side="bottom" />
        <out alias="lo_rLwr_cmd"    type="velma_core_ve_re_lwr_msgs::Command"   side="bottom" />
        <in alias="lo_lLwr_st"      type="velma_core_ve_re_lwr_msgs::Status"    side="bottom" />
        <out alias="lo_lLwr_cmd"    type="velma_core_ve_re_lwr_msgs::Command"   side="bottom" />

    </buffers>

    <trigger_methods>
        <read_buffers min_period="0.0008" first_timeout="0.0015" next_timeout="0.001" first_timeout_sim="1.0" >
            <obligatory name="lo_ec_st" />
            <optional name="lo_rLwr_st" />
            <optional name="lo_lLwr_st" />
        </read_buffers>

        <read_buffers min_period="0" first_timeout="0.0005" next_timeout="0.0001" first_timeout_sim="1.0" >
            <obligatory name="hi_cmd" />
        </read_buffers>
    </trigger_methods>

    <predicates>
        <predicate name="safeIterationsPassed500" />
        <predicate name="rLwrOk" />
        <predicate name="rLwrInCmdState" />
        <predicate name="lLwrOk" />
        <predicate name="lLwrInCmdState" />
        <predicate name="rLwrCmdOk" />
        <predicate name="lLwrCmdOk" />
        <predicate name="tCmdOk" />
        <predicate name="cmdExitSafeState" />
        <predicate name="recvStatus" />
        <predicate name="recvCommand" />
    </predicates>

    <behaviors>
<!--        <behavior name="safe"
            stop_cond="rLwrOk and lLwrOk and rLwrInCmdState and rLwrCmdOk and lLwrInCmdState and lLwrCmdOk and tCmdOk and cmdExitSafeState and safeIterationsPassed500 and (recvStatus or recvCommand)"
            err_cond="FALSE" >
-->
        <behavior name="safe"
            stop_cond="TRUE"
            err_cond="FALSE" >
            <running_component name="safe" />
            <running_component name="safe_lwr_r" />
            <running_component name="safe_lwr_l" />
            <running_component name="safe_t" />
            <running_component name="safe_hp" />
            <running_component name="safe_ht" />
            <running_component name="lHand" />
            <running_component name="rHand" />
            <running_component name="can_queue_tx_l" />
            <running_component name="can_queue_tx_r" />
            <running_component name="lo_ec_cmdConcate" />
            <running_component name="lo_rLwr_cmdConcate" />
            <running_component name="lo_lLwr_cmdConcate" />
<!--            <running_component name="hi_cmdSplit" />-->
            <running_component name="Y" />
        </behavior>

<!--        <behavior name="transparent_cmd"
            stop_cond="recvStatus"
            err_cond="(not CURRENT_BEHAVIOR_OK) or (not rLwrOk) or (not rLwrInCmdState) or (not lLwrOk) or (not lLwrInCmdState) or (not rLwrCmdOk) or (not lLwrCmdOk) or (not tCmdOk) or recvCommand" >
-->
        <behavior name="transparent_cmd"
            stop_cond="TRUE"
            err_cond="FALSE" >
            <running_component name="bypass" />
            <running_component name="transparent_cmd" />
            <running_component name="TorsoPanTransmisionInv" />
            <running_component name="HeadPanTransmisionInv" />
            <running_component name="HeadTiltTransmisionInv" />
            <running_component name="lHand" />
            <running_component name="rHand" />
            <running_component name="can_queue_tx_l" />
            <running_component name="can_queue_tx_r" />
            <running_component name="lo_ec_cmdConcate" />
            <running_component name="lo_rLwr_cmdConcate" />
            <running_component name="lo_lLwr_cmdConcate" />
            <running_component name="hi_cmdSplit" />
            <running_component name="Y" />
        </behavior>

<!--        <behavior name="transparent_status"
            stop_cond="recvCommand"
            err_cond="(not CURRENT_BEHAVIOR_OK) or (not rLwrOk) or (not rLwrInCmdState) or (not lLwrOk) or (not lLwrInCmdState) or (not rLwrCmdOk) or (not lLwrCmdOk) or (not tCmdOk) or recvStatus" >
-->
        <behavior name="transparent_status"
            stop_cond="TRUE"
            err_cond="FALSE" >
            <running_component name="TorsoPanTransmision" />
            <running_component name="HeadPanTransmision" />
            <running_component name="HeadTiltTransmision" />
            <running_component name="lwr_sync_r" />
            <running_component name="lwr_sync_l" />
            <running_component name="hi_stConcate" />
            <running_component name="lo_ec_stSplit" />
            <running_component name="lo_rLwr_stSplit" />
            <running_component name="lo_lLwr_stSplit" />
            <running_component name="packet_counter" />
            <running_component name="hw_state" />
            <running_component name="Y" />
        </behavior>
        <behavior name="safe_status"
            stop_cond="TRUE"
            err_cond="FALSE" >
            <running_component name="safe" />
            <running_component name="TorsoPanTransmision" />
            <running_component name="HeadPanTransmision" />
            <running_component name="HeadTiltTransmision" />
            <running_component name="lwr_sync_r" />
            <running_component name="lwr_sync_l" />
            <running_component name="hi_stConcate" />
            <running_component name="lo_ec_stSplit" />
            <running_component name="lo_rLwr_stSplit" />
            <running_component name="lo_lLwr_stSplit" />
            <running_component name="packet_counter" />
            <running_component name="hw_state" />
            <running_component name="Y" />
        </behavior>
    </behaviors>

    <states initial="safe">
        <state name="safe">
            <behavior name="safe" />
            <next_state name="safe_status" init_cond="(not rLwrOk) or (not lLwrOk) or (not rLwrInCmdState) or (not lLwrInCmdState) or (not safeIterationsPassed500)"/>
            <next_state name="transparent_status" init_cond="rLwrOk and lLwrOk and rLwrInCmdState and lLwrInCmdState and safeIterationsPassed500"/>

        </state>
        <state name="transparent_cmd">
            <behavior name="transparent_cmd" />
            <next_state name="safe_status" init_cond="(not rLwrOk) or (not lLwrOk) or (not rLwrInCmdState) or (not lLwrInCmdState)"/>
            <next_state name="transparent_status" init_cond="rLwrOk and lLwrOk and rLwrInCmdState and lLwrInCmdState"/>
        </state>
        <state name="transparent_status">
            <behavior name="transparent_status" />
            <next_state name="safe" init_cond="(not recvCommand) or (not rLwrCmdOk) or (not lLwrCmdOk) or (not tCmdOk)"/>
            <next_state name="transparent_cmd" init_cond="recvCommand and rLwrCmdOk and lLwrCmdOk and tCmdOk"/>
        </state>
        <state name="safe_status">
            <behavior name="safe_status" />
<!--            <next_state name="safe" init_cond="(not recvCommand) or (not rLwrOk) or (not lLwrOk) or (not rLwrInCmdState) or (not rLwrCmdOk) or (not lLwrInCmdState) or (not lLwrCmdOk) or (not tCmdOk) or (not cmdExitSafeState) or (not safeIterationsPassed500)"/>
            <next_state name="transparent_cmd" init_cond="recvCommand and rLwrOk and lLwrOk and rLwrInCmdState and rLwrCmdOk and lLwrInCmdState and lLwrCmdOk and tCmdOk and cmdExitSafeState and safeIterationsPassed500"/>
-->
<!--
            <next_state name="safe" init_cond="(not recvCommand) or (not rLwrOk) or (not lLwrOk) or (not rLwrInCmdState) or (not rLwrCmdOk) or (not lLwrInCmdState) or (not lLwrCmdOk) or (not tCmdOk) or (not cmdExitSafeState)"/>
            <next_state name="transparent_cmd" init_cond="recvCommand and rLwrOk and lLwrOk and rLwrInCmdState and rLwrCmdOk and lLwrInCmdState and lLwrCmdOk and tCmdOk and cmdExitSafeState"/>
-->
            <next_state name="safe" init_cond="(not recvCommand) or (not rLwrCmdOk) or (not lLwrCmdOk) or (not tCmdOk) or (not cmdExitSafeState) or (not safeIterationsPassed500)"/>
            <next_state name="transparent_cmd" init_cond="recvCommand and rLwrCmdOk and lLwrCmdOk and tCmdOk and cmdExitSafeState and safeIterationsPassed500"/>
        </state>
    </states>

    <simulation use_ros_sim_clock="true" use_sim_clock="true" />

</subsystem_definition>

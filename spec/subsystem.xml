<subsystem_definition>

    <buffers>
        <in alias="hi_cmd"      type="velma_core_cs_ve_body_msgs::Command"         side="top" />
        <out alias="hi_st"      type="velma_core_cs_ve_body_msgs::Status"          side="top"/>
        <in alias="lo_ec_st"   type="test_ec_msgs_gen::EcOutput"                   side="bottom"/>
        <out alias="lo_ec_cmd"  type="test_ec_msgs_gen::EcInput"                   side="bottom"/>
    </buffers>

    <trigger_methods>
        <new_data_on_buffer name="hi_cmd" min="0.001" />
        <no_data_on_buffer name="hi_cmd" first_timeout="0.0012" next_timeout="0.001" first_timeout_sim="1.0" />
    </trigger_methods>

    <predicates>
        <predicate name="safeIterationsPassed500" />
        <predicate name="rLwrOk" />
        <predicate name="rLwrInCmdState" />
        <predicate name="lLwrOk" />
        <predicate name="lLwrInCmdState" />
        <predicate name="rLwrCmdOk" />
        <predicate name="lLwrCmdOk" />
        <predicate name="tCmdOk" />
        <predicate name="cmdExitSafeState" />
    </predicates>

    <behaviors>
        <behavior name="safe"
            stop_cond="rLwrOk and lLwrOk and rLwrInCmdState and rLwrCmdOk and lLwrInCmdState and lLwrCmdOk and tCmdOk and cmdExitSafeState and safeIterationsPassed500"
            err_cond="FALSE" >
            <running_component name="safe" />
            <running_component name="Y" />
        </behavior>

        <behavior name="transparent" 
            stop_cond="FALSE"
            err_cond="(not CURRENT_BEHAVIOR_OK) or (not rLwrOk) or (not rLwrInCmdState) or (not lLwrOk) or (not lLwrInCmdState) or (not rLwrCmdOk) or (not lLwrCmdOk) or (not tCmdOk)" >
            <running_component name="bypass" />
            <running_component name="TorsoPanTransmisionInv" />
            <running_component name="HeadPanTransmisionInv" />
            <running_component name="HeadTiltTransmisionInv" />
            <running_component name="Y" />
        </behavior>

    </behaviors>

    <states initial="safe">
        <state name="safe">
            <behavior name="safe" />
            <next_state name="transparent" init_cond="TRUE"/>
        </state>
        <state name="transparent">
            <behavior name="transparent" />
            <next_state name="safe" init_cond="TRUE"/>
        </state>
    </states>

    <simulation use_ros_sim_clock="false" use_sim_clock="false" trigger_gazebo="true" />

</subsystem_definition>

<subsystem_definition>

    <buffers>
        <in alias="hi_cmd"          type="velma_core_cs_ve_body_msgs::Command"  side="top"/>
        <out alias="hi_st"          type="velma_core_cs_ve_body_msgs::Status"   side="top"/>
        <in alias="lo_ec_st"        type="velma_ec_gen_msgs::EcInput"           side="bottom"   converter="velma_ec_gen_msgs::EcInputBufferConverter"/>
        <out alias="lo_ec_cmd"      type="velma_ec_gen_msgs::EcOutput"          side="bottom"   converter="velma_ec_gen_msgs::EcOutputBufferConverter"/>
        <in alias="lo_rLwr_st"      type="velma_core_ve_re_lwr_msgs::Status"    side="bottom" />
        <out alias="lo_rLwr_cmd"    type="velma_core_ve_re_lwr_msgs::Command"   side="bottom" />
        <in alias="lo_lLwr_st"      type="velma_core_ve_re_lwr_msgs::Status"    side="bottom" />
        <out alias="lo_lLwr_cmd"    type="velma_core_ve_re_lwr_msgs::Command"   side="bottom" />

    </buffers>

    <trigger_methods>
        <read_buffers min_period="0.0008" first_timeout="0.0015" next_timeout="0.001" first_timeout_sim="1.0" >
            <obligatory name="hi_cmd" />
            <obligatory name="lo_ec_st" />
            <optional name="lo_rLwr_st" />
            <optional name="lo_lLwr_st" />
        </read_buffers>
    </trigger_methods>

    <predicates>
        <predicate name="safeIterationsPassed500" />
        <predicate name="rLwrOk" />
        <predicate name="rLwrInCmdState" />
        <predicate name="lLwrOk" />
        <predicate name="lLwrInCmdState" />
        <predicate name="rLwrCmdOk" />
        <predicate name="lLwrCmdOk" />
        <predicate name="tCmdOk" />
        <predicate name="cmdExitSafeState" />
    </predicates>

    <behaviors>
        <behavior name="safe"
            stop_cond="rLwrOk and lLwrOk and rLwrInCmdState and rLwrCmdOk and lLwrInCmdState and lLwrCmdOk and tCmdOk and cmdExitSafeState and safeIterationsPassed500"
            err_cond="FALSE" >
            <running_component name="safe" />
            <running_component name="safe_lwr_r" />
            <running_component name="safe_lwr_l" />
            <running_component name="safe_t" />
            <running_component name="safe_hp" />
            <running_component name="safe_ht" />
            <running_component name="Y" />
        </behavior>

        <behavior name="transparent" 
            stop_cond="FALSE"
            err_cond="(not CURRENT_BEHAVIOR_OK) or (not rLwrOk) or (not rLwrInCmdState) or (not lLwrOk) or (not lLwrInCmdState) or (not rLwrCmdOk) or (not lLwrCmdOk) or (not tCmdOk)" >
            <running_component name="bypass" />
            <running_component name="TorsoPanTransmisionInv" />
            <running_component name="HeadPanTransmisionInv" />
            <running_component name="HeadTiltTransmisionInv" />
            <running_component name="Y" />
        </behavior>

    </behaviors>

    <states initial="safe">
        <state name="safe">
            <behavior name="safe" />
            <next_state name="transparent" init_cond="TRUE"/>
        </state>
        <state name="transparent">
            <behavior name="transparent" />
            <next_state name="safe" init_cond="TRUE"/>
        </state>
    </states>

    <simulation use_ros_sim_clock="true" use_sim_clock="true" />

</subsystem_definition>

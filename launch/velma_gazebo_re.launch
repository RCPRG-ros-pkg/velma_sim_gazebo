<?xml version="1.0"?>
<launch>
  <!-- <env name="GAZEBO_MODEL_PATH" value="$(find rcprg_gazebo_utils)/data/gazebo/models" /> -->

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="gui" default="false"/>
  <arg name="headless" default="false"/>
  <arg name="verbose" default="true"/>
  <arg name="debug" default="false"/>
  <!-- Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable -->
  <arg name="world_name" default="$(find rcprg_gazebo_utils)/data/gazebo/worlds/blank.world"/>
  <arg name="load_robot_description" default="true"/>
  <arg name="GAZEBO_MODEL_PATH" default=""/>
  <arg name="GAZEBO_RESOURCE_PATH" default=""/>
  <arg name="profile" default="dart_2ms"/>
  <arg name="collision_detector" default="dart"/>

  <arg name="use_kinect" default="true"/>
  <arg name="use_stereo_pair" default="true"/>

  <arg name="state_snapshot" default="$(find velma_sim_gazebo)/config/initial_state.txt" />
  <arg name="spawn_velma" default="true"/>

  <arg name="run_steps" default="-1"/>

  <arg name="use_gpu_ray" default="true"/>

  <arg name="ORO_LOGLEVEL" default="3"/>

  <!-- set command arguments -->
  <arg unless="$(arg headless)" name="command_arg2" value=""/>
  <arg     if="$(arg headless)" name="command_arg2" value="-r"/>
  <arg unless="$(arg verbose)" name="command_arg3" value=""/>
  <arg     if="$(arg verbose)" name="command_arg3" value="--verbose"/>
  <arg unless="$(arg debug)" name="script_type" value="gzserver"/>
  <arg     if="$(arg debug)" name="script_type" value="debug"/>

  <arg name="mobile_base" default="false" />

  <arg unless="$(arg mobile_base)" name="srdf_filename" value="velma.srdf"/>
  <arg     if="$(arg mobile_base)" name="srdf_filename" value="velma_mobile.srdf"/>

  <!-- start gazebo server-->
  <env
    name="GAZEBO_MODEL_PATH"
    value="$(arg GAZEBO_MODEL_PATH):$(optenv GAZEBO_MODEL_PATH):$(find rcprg_gazebo_utils)/data/gazebo/models:"
  />

  <env
    name="GAZEBO_RESOURCE_PATH"
    value="$(arg GAZEBO_RESOURCE_PATH):$(optenv GAZEBO_RESOURCE_PATH):$(find rcprg_gazebo_utils)/data/gazebo:"
  />
  <node
    name="gazebo"
    pkg="gazebo_ros"
    type="$(arg script_type)"
    respawn="false"
    output="screen"
    args="$(arg command_arg2) $(arg command_arg3) $(arg world_name) -s librtt_gazebo_system.so -u -o $(arg profile)"
  >
    <env name="ORO_LOGLEVEL" value="$(arg ORO_LOGLEVEL)"/>
    <!-- <env name="LD_PRELOAD" value="librtt_malloc_hook.so" /> -->
  </node>

  <!--<node name="convert_velma_to_sdf" pkg="velma_sim_gazebo" type="convert_velma_to_sdf" respawn="false" output="screen"/>-->

  <!-- start gazebo client -->
  <group if="$(arg gui)">
    <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen"/>
  </group>

  <!-- load robot description-->
  <param name="/use_sim_time" value="true"/>

  <group if="$(arg load_robot_description)">
    <include file="$(find velma_description)/launch/upload_robot.launch" >
      <arg name="load_velma_sim_gazebo" value="true"/>
      <arg name="use_dh_compatible_model" value="false"/>
      <arg name="use_left_optoforces" value="false"/>
      <arg name="use_right_optoforces" value="false"/>
      <arg name="mobile_base" value="false"/>
      <arg name="use_gpu_ray" value="true"/>
      <arg name="collision_detector" value="$(arg collision_detector)"/>
      <arg name="use_kinect" value="true"/>
      <arg name="use_stereo_pair" value="true"/>
    </include>
  </group>

  <node
    name="rob_st_pub"
    pkg="robot_state_publisher"
    type="robot_state_publisher">
    <param name="use_tf_static" value="false"/>
  </node>

  <!--
  <group if="$(arg spawn_velma)">
  <node
    name="spawn_urdf"
    pkg="gazebo_ros"
    type="spawn_model"
    output="screen"
    args="-param robot_description -urdf -model velma -gazebo_namespace gazebo" />
  </group>
  -->

  <group if="$(arg spawn_velma)">
  <node
    name="spawn_urdf"
    pkg="gazebo_ros"
    type="spawn_model"
    output="screen"
    args="-param robot_description_sdf -sdf -model velma -gazebo_namespace gazebo" />
  </group>

  <node
      name="unpause_on_init"
      pkg="velma_sim_gazebo"
      type="unpause_on_init"
      output="screen" >
    <param name="state_snapshot" value="$(arg state_snapshot)"/>
    <param name="run_steps" value="$(arg run_steps)" />
  </node>

  <!--
  LWRrSim:
    init_joint_positions: [0,-1.57,1.57,1.57,0,-1.57,0]
    init_joint_positions: [0,-2,1.57,0,0,-1.2,0]
    init_joint_positions: [-0.3,-1.8,1.25,0.85,0,-0.5,0]
  LWRlSim:
    init_joint_positions: [0,1.57,-1.57,-1.57,0,1.57,0]
    init_joint_positions: [0,2,-1.57,0,0,1.2,0]
    init_joint_positions: [0.3,1.8,-1.25,-0.85,0,0.5,0]
  -->

  <group ns="/gazebo">
    <rosparam>
      LWRrSim:
        name: right
        init_joint_names: [right_arm_0_joint, right_arm_1_joint, right_arm_2_joint, right_arm_3_joint, right_arm_4_joint, right_arm_5_joint, right_arm_6_joint]
        init_joint_positions: [-0.3, -1.8, 1.25, 0.85, 0, -0.5, 0]
        tool:
          m: 1.52832
          com:
            x: 0.152207
            y: 0.0108986
            z: -0.0694205
          ixx: 0.00818233
          ixy: -0.000581708
          ixz: 0.00126671
          iyy: 0.00703382
          iyz: 0.000167246
          izz: 0.012285
      LWRlSim:
        name: left
        init_joint_names: [left_arm_0_joint, left_arm_1_joint, left_arm_2_joint, left_arm_3_joint, left_arm_4_joint, left_arm_5_joint, left_arm_6_joint]
        init_joint_positions: [0.3, 1.8, -1.25, -0.85, 0, 0.5, 0]
        tool:
          m: 1.53858
          com:
            x: -0.15272
            y: 0.0111521
            z: -0.0687842
          ixx: 0.00838618
          ixy: 0.000596738
          ixz: -0.0011774
          iyy: 0.00702498
          iyz: 0.000105634
          izz: 0.012516
      RightHand:
        prefix: right
        disable_component: false
        can_id_base: 11
        sp_kp: 100
        sp_ki: 20
        sp_kd: 0
        sp_min_i: -0.05
        sp_max_i: 0.05
        sp_min_cmd: -0.5
        sp_max_cmd: 0.5
        k2_kp: 100
        k2_ki: 20
        k2_kd: 0
        k2_min_i: -0.025
        k2_max_i: 0.025
        k2_min_cmd: -0.5
        k2_max_cmd: 0.5
        k3_kp: 100
        k3_ki: 20
        k3_kd: 0
        k3_min_i: -0.025
        k3_max_i: 0.025
        k3_min_cmd: -0.5
        k3_max_cmd: 0.5
      LeftHand:
        prefix: left
        disable_component: false
        can_id_base: 11
        sp_kp: 100
        sp_ki: 20
        sp_kd: 0
        sp_min_i: -0.05
        sp_max_i: 0.05
        sp_min_cmd: -0.5
        sp_max_cmd: 0.5
        k2_kp: 100
        k2_ki: 20
        k2_kd: 0
        k2_min_i: -0.025
        k2_max_i: 0.025
        k2_min_cmd: -0.5
        k2_max_cmd: 0.5
        k3_kp: 100
        k3_ki: 20
        k3_kd: 0
        k3_min_i: -0.025
        k3_max_i: 0.025
        k3_min_cmd: -0.5
        k3_max_cmd: 0.5
      LeftHandTactile:
        prefix: left
      RightHandTactile:
        prefix: right
      LeftHandOptoforce:
        device_name: gazebo_leftHand
        n_sensors: 3
        frame_id_vec: [left_HandFingerOneKnuckleThreeOptoforceBase, left_HandFingerTwoKnuckleThreeOptoforceBase, left_HandFingerThreeKnuckleThreeOptoforceBase]
      RightHandOptoforce:
        device_name: gazebo_rightHand
        n_sensors: 3
        frame_id_vec: [right_HandFingerOneKnuckleThreeOptoforceBase, right_HandFingerTwoKnuckleThreeOptoforceBase, right_HandFingerThreeKnuckleThreeOptoforceBase]
      RightFtSensor:
        joint_name: rightFtSensorJoint
        transform_xyz: [0, 0, 0]
        transform_rpy: [-1.570796327, 0.5235987756, -1.570796327] <!-- rotations from wrist to sensor frame (trasform coordinates from sensor to wrist frame)-->     
      LeftFtSensor:
        joint_name: leftFtSensorJoint
        transform_xyz: [0, 0, 0]
        transform_rpy: [-1.570796327, 0.5235987756, 1.570796327] <!-- rotations from wrist to sensor frame -->        
      can_queue_tx_r:
        invert_rx_tx: true
      can_queue_tx_l:
        invert_rx_tx: true
    </rosparam>
  </group>
</launch>

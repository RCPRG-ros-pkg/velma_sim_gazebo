import("rtt_ros");
import("rtt_roscomm");
import("rtt_rosparam");
require("os")
require("print")

ros.import("rtt_actionlib");
ros.import("rtt_barrett_hand_controller_msgs");

ros.import("eigen_typekit");
ros.import("rtt_control_msgs");
ros.import("conman");
ros.import("conman_ros");
ros.import("lwr_fri");
//ros.import("velma_hardware");
ros.import("oro_joint_state_publisher");
ros.import("controller_common");
ros.import("velma_controller");
ros.import("rtt_cartesian_trajectory_msgs");
ros.import("rtt_std_msgs");
ros.import("rtt_tf");
//ros.import("ec_hardware")
//ros.import("ec_drivers")
ros.import("internal_space_spline_trajectory_action")
ros.import("internal_space_spline_trajectory_generator")
ros.import("port_operations")

//setActivityOnCPU("lwr_controller", 0, 1, ORO_SCHED_RT, 0)

//------------------------------------------------------------------------------
//-- Hardware interface
//------------------------------------------------------------------------------

setActivityOnCPU("VelmaSim", 0.001, 6, ORO_SCHED_RT, 3);
VelmaSim.loadService("rosparam");
VelmaSim.rosparam.getAll();

//loadComponent("FRIr", "FRIComponent");
//setActivityOnCPU("FRIr", 0.0, 6, ORO_SCHED_RT, 3);
//FRIr.loadService("rosparam");
//FRIr.rosparam.getAll();

//loadComponent("FRIl", "FRIComponent")
//setActivityOnCPU("FRIl", 0.0, 6, ORO_SCHED_RT, 3)
//FRIl.loadService("rosparam");
//FRIl.rosparam.getAll();

//loadComponent("EC","ECHardware")
//setActivityOnCPU("EC", 0.001, 6, ORO_SCHED_RT, 3)
//EC.loadService("rosparam")
//EC.loadService("elmo_driver")
//EC.loadService("ati_driver")
//EC.rosparam.getAll()
//EC.configure();

VelmaSim.configure();

print.ln("ops: VelmaSim configured")
//FRIr.configure();
//FRIl.configure();

stream("VelmaSim.r_KRL_CMD_in", ros.comm.topic("/right_arm/KRL_CMD"));
stream("VelmaSim.l_KRL_CMD_in", ros.comm.topic("/left_arm/KRL_CMD"));

print.ln("ops: VelmaSim KRL_CMD streamed")



## Load a BarrettHand component
loadComponent("rightHandMoveAction","BarrettHandMoveAction")

## Give it a periodic activity
setActivityOnCPU("rightHandMoveAction", 0.01, 1, ORO_SCHED_RT, 0);
rightHandMoveAction.loadService("rosparam");
rightHandMoveAction.rosparam.getAll();

connect("rightHandMoveAction.q_out", "VelmaSim.rh_q_in", ConnPolicy());
connect("rightHandMoveAction.v_out", "VelmaSim.rh_v_in", ConnPolicy());
connect("rightHandMoveAction.t_out", "VelmaSim.rh_t_in", ConnPolicy());
connect("rightHandMoveAction.mp_out", "VelmaSim.rh_mp_in", ConnPolicy());
connect("rightHandMoveAction.hold_out", "VelmaSim.rh_hold_in", ConnPolicy());

connect("VelmaSim.rh_status_out", "rightHandMoveAction.status_in", ConnPolicy());

rightHandMoveAction.configure();
rightHandMoveAction.loadService("actionlib");
rightHandMoveAction.actionlib.connect("/right_hand/move_hand");

loadComponent("LWRrDiag", "FRIDiagnostics")
setActivityOnCPU("LWRrDiag", 0.1, 1, ORO_SCHED_RT, 0)
LWRrDiag.loadService("rosparam");
LWRrDiag.rosparam.getAll();

connect("VelmaSim.r_RobotState_out", "LWRrDiag.RobotState_INPORT", ConnPolicy());
connect("VelmaSim.r_FRIState_out", "LWRrDiag.FRIState_INPORT", ConnPolicy());
stream("LWRrDiag.Diagnostics_OUTPORT", ros.comm.topic("/diagnostic"));
LWRrDiag.configure()

loadComponent("LWRlDiag", "FRIDiagnostics")
setActivityOnCPU("LWRlDiag", 0.1, 1, ORO_SCHED_RT, 0)
LWRlDiag.loadService("rosparam");
LWRlDiag.rosparam.getAll();

connect("VelmaSim.l_RobotState_out", "LWRlDiag.RobotState_INPORT", ConnPolicy());
connect("VelmaSim.l_FRIState_out", "LWRlDiag.FRIState_INPORT", ConnPolicy());
stream("LWRlDiag.Diagnostics_OUTPORT", ros.comm.topic("/diagnostic"));
LWRlDiag.configure()

print.ln("ops: diagnostics components configured")

//------------------------------------------------------------------------------
//-- Controller manager
//------------------------------------------------------------------------------
loadComponent("scheme", "conman::Scheme");

print.ln("ops: scheme loaded")

setActivityOnCPU("scheme", 0.001, 5, ORO_SCHED_RT, 3);

print.ln("ops: scheme activity set")

scheme.loadService("conman_ros");

print.ln("ops: scheme loaded servicce")

scheme.configure();

print.ln("ops: scheme configured")

//------------------------------------------------------------------------------
//-- Torso Joystick Teleop
//------------------------------------------------------------------------------

loadComponent("TJ", "TorsoTeleopJoy")
setActivityOnCPU("TJ", 0.01, 6, ORO_SCHED_RT, 0)
TJ.loadService("rosparam");
TJ.rosparam.getAll();
TJ.configure();

stream("TJ.Joy", ros.comm.topic("/joy"));

//------------------------------------------------------------------------------
//-- Camera Trigger
//------------------------------------------------------------------------------

loadComponent("TGR", "TriggerGenerator");
setActivityOnCPU("TGR", 0.1, 2, ORO_SCHED_RT, 1);
TGR.configure();

//connect("TGR.Trigger", "EC.torso.subnode0.DigitalOutput1", ConnPolicy());
//connect("TGR.Trigger", "EC.torso.subnode0.DigitalOutput2", ConnPolicy());
stream("TGR.TriggerStamp", ros.comm.topic("/camera_trigger_stamp"));

//------------------------------------------------------------------------------
//-- Velma controller
//------------------------------------------------------------------------------

// transmision interface

//loadComponent("TorsoPanTransmision", "SimpleTransmision");
//TorsoPanTransmision.loadService("rosparam");
//TorsoPanTransmision.rosparam.getAll();

//connect("TorsoPanTransmision.MotorPosition", "EC.torso_pan.motor_position", ConnPolicy());
//connect("TorsoPanTransmision.MotorVelocity", "EC.torso_pan.motor_velocity", ConnPolicy());

//loadComponent("TorsoPanTransmisionInv", "SimpleTransmisionInv");
//TorsoPanTransmisionInv.loadService("rosparam");
//TorsoPanTransmisionInv.rosparam.getAll();

//connect("TorsoPanTransmisionInv.MotorCurrent", "EC.torso_pan.motor_current_command", ConnPolicy())

//loadComponent("TorsoTiltTransmision", "SimpleTransmision");
//TorsoTiltTransmision.loadService("rosparam");
//TorsoTiltTransmision.rosparam.getAll();

//connect("TorsoTiltTransmision.MotorPosition", "EC.torso.subnode3.MotorPosition", ConnPolicy());
//connect("TorsoTiltTransmision.MotorVelocity", "EC.torso.subnode3.MotorVelocity", ConnPolicy());

// head command limiters

loadComponent("HeadPanVelocityLimiter", "VelocityLimiter");
HeadPanVelocityLimiter.loadService("rosparam");
HeadPanVelocityLimiter.rosparam.getAll();

//connect("HeadPanVelocityLimiter.PositionMsr", "EC.head_pan.motor_position", ConnPolicy());
//connect("HeadPanVelocityLimiter.PositionOut", "EC.head_pan.motor_position_command", ConnPolicy());
connect("HeadPanVelocityLimiter.PositionMsr", "VelmaSim.head_pan_motor_position_out", ConnPolicy());
connect("HeadPanVelocityLimiter.PositionOut", "VelmaSim.head_pan_motor_position_command_in", ConnPolicy());

loadComponent("HeadTiltVelocityLimiter", "VelocityLimiter");
HeadTiltVelocityLimiter.loadService("rosparam");
HeadTiltVelocityLimiter.rosparam.getAll();

//connect("HeadTiltVelocityLimiter.PositionMsr", "EC.head_tilt.motor_position", ConnPolicy());
//connect("HeadTiltVelocityLimiter.PositionOut", "EC.head_tilt.motor_position_command", ConnPolicy());
connect("HeadTiltVelocityLimiter.PositionMsr", "VelmaSim.head_tilt_motor_position_out", ConnPolicy());
connect("HeadTiltVelocityLimiter.PositionOut", "VelmaSim.head_tilt_motor_position_command_in", ConnPolicy());
// head transmisions
//pan
loadComponent("HeadPanTransmision", "SimpleTransmision");
HeadPanTransmision.loadService("rosparam");
HeadPanTransmision.rosparam.getAll();

//connect("HeadPanTransmision.MotorPosition", "EC.head_pan.motor_position", ConnPolicy());
//connect("HeadPanTransmision.MotorVelocity", "EC.head_pan.motor_velocity", ConnPolicy());
connect("HeadPanTransmision.MotorPosition", "VelmaSim.head_pan_motor_position_out", ConnPolicy());
connect("HeadPanTransmision.MotorVelocity", "VelmaSim.head_pan_motor_velocity_out", ConnPolicy());

loadComponent("HeadPanTransmisionInv", "SimpleTransmisionInv");
HeadPanTransmisionInv.loadService("rosparam");
HeadPanTransmisionInv.rosparam.getAll();

//connect("HeadPanTransmisionInv.MotorCurrent", "EC.head_pan.motor_current_command", ConnPolicy())
//connect("HeadPanTransmisionInv.MotorPosition", "HeadPanVelocityLimiter.PositionIn", ConnPolicy())
//connect("HeadPanTransmisionInv.MotorVelocity", "EC.head_pan.motor_velocity_command", ConnPolicy())
connect("HeadPanTransmisionInv.MotorCurrent", "VelmaSim.head_pan_motor_current_command_in", ConnPolicy())
connect("HeadPanTransmisionInv.MotorPosition", "HeadPanVelocityLimiter.PositionIn", ConnPolicy())
connect("HeadPanTransmisionInv.MotorVelocity", "VelmaSim.head_pan_motor_velocity_command_in", ConnPolicy())

//tilt
loadComponent("HeadTiltTransmision", "SimpleTransmision");
HeadTiltTransmision.loadService("rosparam");
HeadTiltTransmision.rosparam.getAll();

//connect("HeadTiltTransmision.MotorPosition", "EC.head_tilt.motor_position", ConnPolicy());
//connect("HeadTiltTransmision.MotorVelocity", "EC.head_tilt.motor_velocity", ConnPolicy());
connect("HeadTiltTransmision.MotorPosition", "VelmaSim.head_tilt_motor_position_out", ConnPolicy());
connect("HeadTiltTransmision.MotorVelocity", "VelmaSim.head_tilt_motor_velocity_out", ConnPolicy());

loadComponent("HeadTiltTransmisionInv", "SimpleTransmisionInv");
HeadTiltTransmisionInv.loadService("rosparam");
HeadTiltTransmisionInv.rosparam.getAll();

//connect("HeadTiltTransmisionInv.MotorCurrent", "EC.head_tilt.motor_current_command", ConnPolicy())
//connect("HeadTiltTransmisionInv.MotorPosition", "HeadTiltVelocityLimiter.PositionIn", ConnPolicy())
//connect("HeadTiltTransmisionInv.MotorVelocity", "EC.head_tilt.motor_velocity_command", ConnPolicy())
connect("HeadTiltTransmisionInv.MotorCurrent", "VelmaSim.head_tilt_motor_current_command_in", ConnPolicy())
connect("HeadTiltTransmisionInv.MotorPosition", "HeadTiltVelocityLimiter.PositionIn", ConnPolicy())
connect("HeadTiltTransmisionInv.MotorVelocity", "VelmaSim.head_tilt_motor_velocity_command_in", ConnPolicy())

// Head position aggregate
loadComponent("HeadPosAggregate","PortDoubleAggregate")
HeadPosAggregate.loadService("rosparam")
HeadPosAggregate.rosparam.getAll()
HeadPosAggregate.configure()

connect("HeadPosAggregate.InputPort_0", "HeadPanTransmision.JointPosition", ConnPolicy())
connect("HeadPosAggregate.InputPort_1", "HeadTiltTransmision.JointPosition", ConnPolicy())

// Head Velocity port aggregate
loadComponent("HeadVelAggregate","PortDoubleAggregate")
HeadVelAggregate.loadService("rosparam")
HeadVelAggregate.rosparam.getAll()
HeadVelAggregate.configure()

connect("HeadVelAggregate.InputPort_0", "HeadPanTransmision.JointVelocity", ConnPolicy())
connect("HeadVelAggregate.InputPort_1", "HeadTiltTransmision.JointVelocity", ConnPolicy())

// Head PositionCommand split

loadComponent("HeadPosSplit","PortDoubleSplit")
HeadPosSplit.loadService("rosparam")
HeadPosSplit.rosparam.getAll()
HeadPosSplit.configure()

connect("HeadPosSplit.OutputPort_0", "HeadPanTransmisionInv.JointPosition", ConnPolicy())
connect("HeadPosSplit.OutputPort_1", "HeadTiltTransmisionInv.JointPosition", ConnPolicy())

// Torso torque port spliter
//loadComponent("TorsoTrqSplit","PortDoubleSplit")
//TorsoTrqSplit.loadService("rosparam")
//TorsoTrqSplit.rosparam.getAll()
//TorsoTrqSplit.configure()

//connect("TorsoTrqSplit.OutputPort_0", "TorsoPanTransmisionInv.JointTorque", ConnPolicy())

// Torso Position port aggregate
//loadComponent("TorsoPosAggregate","PortDoubleAggregate")
//TorsoPosAggregate.loadService("rosparam")
//TorsoPosAggregate.rosparam.getAll()
//TorsoPosAggregate.configure()

//connect("TorsoPosAggregate.InputPort_0", "TorsoPanTransmision.JointPosition", ConnPolicy())
//connect("TorsoPosAggregate.InputPort_1", "TorsoTiltTransmision.JointPosition", ConnPolicy())

// Torso Velocity port aggregate
//loadComponent("TorsoVelAggregate","PortDoubleAggregate")
//TorsoVelAggregate.loadService("rosparam")
//TorsoVelAggregate.rosparam.getAll()
//TorsoVelAggregate.configure()

//connect("TorsoVelAggregate.InputPort_0", "TorsoPanTransmision.JointVelocity", ConnPolicy())
//connect("TorsoVelAggregate.InputPort_1", "TorsoTiltTransmision.JointVelocity", ConnPolicy())

// torqure controlled joint concate
loadComponent("Jc", "VectorConcate3");
connect("VelmaSim.t_JointPosition_out", "Jc.In0", ConnPolicy());
connect("VelmaSim.r_JointPosition_out", "Jc.In1", ConnPolicy());
connect("VelmaSim.l_JointPosition_out", "Jc.In2", ConnPolicy());

loadComponent("Jvc", "VectorConcate3");
connect("VelmaSim.t_JointVelocity_out", "Jvc.In0", ConnPolicy());
connect("VelmaSim.r_JointVelocity_out", "Jvc.In1", ConnPolicy());
connect("VelmaSim.l_JointVelocity_out", "Jvc.In2", ConnPolicy());

loadComponent("JcAll", "VectorConcate4");
connect("Jc.Out", "JcAll.In0", ConnPolicy());
connect("HeadPosAggregate.OutputPort", "JcAll.In1", ConnPolicy());
connect("VelmaSim.rh_q_out", "JcAll.In2", ConnPolicy());
connect("VelmaSim.lh_q_out", "JcAll.In3", ConnPolicy());

loadComponent("JvcAll", "VectorConcate4");
connect("Jvc.Out", "JvcAll.In0", ConnPolicy());
connect("HeadVelAggregate.OutputPort", "JvcAll.In1", ConnPolicy());
connect("VelmaSim.rh_q_out", "JvcAll.In2", ConnPolicy());
connect("VelmaSim.lh_q_out", "JvcAll.In3", ConnPolicy());

loadComponent("Ts", "VectorSplit3");
Ts.loadService("rosparam");
Ts.rosparam.getAll();

connect("Ts.Out0", "VelmaSim.t_JointTorqueCommand_in", ConnPolicy());
connect("Ts.Out1", "VelmaSim.r_JointTorqueCommand_in", ConnPolicy());
connect("Ts.Out2", "VelmaSim.l_JointTorqueCommand_in", ConnPolicy());

loadComponent("Dwr", "DecimatorWrench");
setActivityOnCPU("Dwr", 0.01, 1, ORO_SCHED_RT, 0)
connect("Dwr.In", "VelmaSim.r_CartesianWrench_out", ConnPolicy());
stream("Dwr.Out", ros.comm.topic("/right_arm/wrench"));

loadComponent("Dwl", "DecimatorWrench");
setActivityOnCPU("Dwl", 0.01, 1, ORO_SCHED_RT, 0)
connect("Dwl.In", "VelmaSim.l_CartesianWrench_out", ConnPolicy());
stream("Dwl.Out", ros.comm.topic("/left_arm/wrench"));

//loadComponent("Mass", "RobotMassMatrix");
loadComponent("Mass", "MassTest");
Mass.loadService("robot");
Mass.configure();

connect("Jc.Out", "Mass.JointPosition", ConnPolicy());
connect("VelmaSim.l_MassMatrix_out", "Mass.MassMatrixLeft", ConnPolicy());
connect("VelmaSim.r_MassMatrix_out", "Mass.MassMatrixRight", ConnPolicy());

loadComponent("CImp", "CartesianImpedance");
CImp.loadService("robot");
CImp.configure();

connect("Jc.Out", "CImp.JointPosition", ConnPolicy());
connect("Jvc.Out", "CImp.JointVelocity", ConnPolicy());
connect("Mass.MassMatrix", "CImp.MassMatrixInv", ConnPolicy());

connect("CImp.JointTorqueCommand", "Ts.In", ConnPolicy());

loadComponent("PoseIntRight", "CartesianInterpolator");

connect("PoseIntRight.CartesianPositionCommand", "CImp.CartesianPositionCommand0", ConnPolicy());

loadComponent("PoseIntLeft", "CartesianInterpolator");

connect("PoseIntLeft.CartesianPositionCommand", "CImp.CartesianPositionCommand1", ConnPolicy());

// tool

loadComponent("ToolIntRight", "CartesianInterpolator")
ToolIntRight.configure();
ToolIntRight.loadService("rosparam");
ToolIntRight.rosparam.getAll();
connect("ToolIntRight.CartesianPositionCommand", "CImp.ToolPositionCommand0", ConnPolicy())

loadComponent("ToolIntLeft", "CartesianInterpolator")
ToolIntLeft.configure();
ToolIntLeft.loadService("rosparam");
ToolIntLeft.rosparam.getAll();
connect("ToolIntLeft.CartesianPositionCommand", "CImp.ToolPositionCommand1", ConnPolicy())

loadComponent("TfPub", "TfPublisher")
setActivityOnCPU("TfPub", 0.01, 1, ORO_SCHED_RT, 0)
TfPub.loadService("rosparam");
TfPub.rosparam.getAll();
TfPub.configure();
connect("ToolIntRight.CartesianPositionCommand", "TfPub.In0", ConnPolicy())
connect("ToolIntLeft.CartesianPositionCommand", "TfPub.In1", ConnPolicy())
connect("PoseIntRight.CartesianPositionCommand", "TfPub.In2", ConnPolicy())
connect("PoseIntLeft.CartesianPositionCommand", "TfPub.In3", ConnPolicy())
stream("TfPub.OutTf", ros.comm.topic("/tf"))

loadComponent("TorquePubRight", "TorquePublisher")
setActivityOnCPU("TorquePubRight", 0.01, 1, ORO_SCHED_RT, 0)
connect("VelmaSim.r_JointTorque_out", "TorquePubRight.InJointTorque", ConnPolicy())
connect("Ts.Out1", "TorquePubRight.InJointTorqueCommand", ConnPolicy())
connect("VelmaSim.r_GravityTorque_out", "TorquePubRight.InGravityTorque", ConnPolicy())
TorquePubRight.configure();
stream("TorquePubRight.OutTorques", ros.comm.topic("/right_arm/torques"))

loadComponent("TorquePubLeft", "TorquePublisher")
setActivityOnCPU("TorquePubLeft", 0.01, 1, ORO_SCHED_RT, 0)
connect("VelmaSim.l_JointTorque_out", "TorquePubLeft.InJointTorque", ConnPolicy())
connect("Ts.Out1", "TorquePubLeft.InJointTorqueCommand", ConnPolicy())
connect("VelmaSim.l_GravityTorque_out", "TorquePubLeft.InGravityTorque", ConnPolicy())
TorquePubLeft.configure();
stream("TorquePubLeft.OutTorques", ros.comm.topic("/left_arm/torques"))

// impedance

loadComponent("ImpedanceIntRight", "CartesianImpedanceInterpolator");
connect("ImpedanceIntRight.CartesianImpedanceCommand", "CImp.CartesianImpedanceCommand0", ConnPolicy());

loadComponent("ImpedanceIntLeft", "CartesianImpedanceInterpolator");
connect("ImpedanceIntLeft.CartesianImpedanceCommand", "CImp.CartesianImpedanceCommand1", ConnPolicy());

loadComponent("JntImp", "JointImpedance")
JntImp.loadService("rosparam");
JntImp.rosparam.getAll();

connect("Jc.Out", "JntImp.JointPosition", ConnPolicy());
connect("Jvc.Out", "JntImp.JointVelocity", ConnPolicy());
connect("Mass.MassMatrix", "JntImp.MassMatrix", ConnPolicy());
connect("JntImp.JointTorqueCommand", "Ts.In", ConnPolicy());

JntImp.configure();

loadComponent("FK", "VelmaFK");
FK.loadService("robot");
FK.configure();

connect("ToolIntLeft.CartesianPositionCommand", "FK.LeftToolCommand_INPORT", ConnPolicy())
connect("ToolIntRight.CartesianPositionCommand", "FK.RightToolCommand_INPORT", ConnPolicy())

connect("Jc.Out", "FK.JointPositionCommand_INPORT", ConnPolicy())

connect("FK.LeftPositionCommand_OUTPORT", "PoseIntLeft.CartesianPosition", ConnPolicy())
connect("FK.RightPositionCommand_OUTPORT", "PoseIntRight.CartesianPosition", ConnPolicy())

connect("FK.RightPositionCommand_OUTPORT", "TfPub.In4", ConnPolicy())
connect("FK.LeftPositionCommand_OUTPORT", "TfPub.In5", ConnPolicy())

loadComponent("TrajectoryGeneratorJoint", "InternalSpaceSplineTrajectoryGenerator")
TrajectoryGeneratorJoint.loadService("rosparam");
TrajectoryGeneratorJoint.rosparam.getAll();
connect("Jc.Out","TrajectoryGeneratorJoint.JointPosition", ConnPolicy())
connect("TrajectoryGeneratorJoint.JointPositionCommand","JntImp.JointPositionCommand", ConnPolicy())
TrajectoryGeneratorJoint.configure()

loadComponent("JntLimit", "JointLimitAvoidance");
JntLimit.loadService("rosparam");
JntLimit.rosparam.getAll();

connect("Jc.Out", "JntLimit.JointPosition", ConnPolicy());
connect("Jvc.Out", "JntLimit.JointVelocity", ConnPolicy());
connect("Mass.MassMatrix", "JntLimit.MassMatrix", ConnPolicy());
connect("JntLimit.JointTorqueCommand", "CImp.NullSpaceTorqueCommand", ConnPolicy());

loadComponent("VG", "VelmaGrav");
VG.configure();

connect("VelmaSim.l_GravityTorque_out", "VG.GravTrqLeft", ConnPolicy());
connect("VelmaSim.r_GravityTorque_out", "VG.GravTrqRight", ConnPolicy());

//connect("TJ.NullSpaceTorqueCommand", "JntLimit.NullSpaceTorqueCommand", ConnPolicy());
connect("VG.GravTrq", "JntLimit.NullSpaceTorqueCommand", ConnPolicy());

// head look-at

//loadComponent("HeadIK", "HeadLookAt3D")
//HeadIK.loadService("rosparam");
//HeadIK.rosparam.getAll();
//HeadIK.configure();

//loadComponent("PT", "PoseTransform")
//PT.loadService("rosparam");
//PT.rosparam.getAll();
//PT.configure();

//connect("PT.SecondaryTargetPoint", "HeadIK.TargetPoint_INPORT", ConnPolicy());

//if ((os.isenv("HEAD_JOY") == false) || (os.getenv("HEAD_JOY") == "true")) then {
//  connect("TJ.PrimaryFrameSelector", "PT.PrimaryFrameSelector", ConnPolicy());
//  connect("TJ.HeadTargetPoint", "PT.PrimaryTargetPoint", ConnPolicy());
//  connect("FK.RightPositionCommand_OUTPORT", "PT.PrimaryFrame1", ConnPolicy());
//  connect("FK.LeftPositionCommand_OUTPORT", "PT.PrimaryFrame2", ConnPolicy());
//  stream("PT.PrimaryTargetPassThrough", ros.comm.topic("/head_lookat_pose"));
//}
//else {
//    stream("HeadIK.TargetPoint_INPORT", ros.comm.topic("/head_lookat_pose"));
//}

//stream("PT.PrimaryTargetPoint", ros.comm.topic("/head_lookat_pose"));

//connect("HeadPosSplit.InputPort", "HeadIK.HeadJointPositionCommand_OUTPORT", ConnPolicy());
////connect("TorsoPosAggregate.OutputPort", "HeadIK.JointPosition_INPORT", ConnPolicy());




loadComponent("HeadTrajectoryGeneratorJoint", "InternalSpaceSplineTrajectoryGenerator")
HeadTrajectoryGeneratorJoint.loadService("rosparam");
HeadTrajectoryGeneratorJoint.rosparam.getAll();
connect("HeadPosAggregate.OutputPort","HeadTrajectoryGeneratorJoint.JointPosition", ConnPolicy())
connect("HeadTrajectoryGeneratorJoint.JointPositionCommand","HeadPosSplit.InputPort", ConnPolicy())
HeadTrajectoryGeneratorJoint.configure()



print.ln("ops: configuring")


// CONFIGURE
Jc.configure();
Jvc.configure();
JcAll.configure();
JvcAll.configure();
Ts.configure();
Dwr.configure();
Dwl.configure();
PoseIntRight.configure();
PoseIntLeft.configure();
ImpedanceIntRight.configure()
ImpedanceIntLeft.configure()
JntLimit.configure();

print.ln("ops: configured")

//addPeer("scheme", "TorsoPanTransmision")
//addPeer("scheme", "TorsoPanTransmisionInv")
//addPeer("scheme", "TorsoTiltTransmision")
addPeer("scheme", "HeadPanVelocityLimiter")
addPeer("scheme", "HeadTiltVelocityLimiter")
addPeer("scheme", "HeadPanTransmision")
addPeer("scheme", "HeadPanTransmisionInv")
addPeer("scheme", "HeadTiltTransmision")
addPeer("scheme", "HeadTiltTransmisionInv")
addPeer("scheme", "HeadPosAggregate")
addPeer("scheme", "HeadPosSplit")
//addPeer("scheme", "TorsoTrqSplit")
//addPeer("scheme", "TorsoPosAggregate")
//addPeer("scheme", "TorsoVelAggregate")
addPeer("scheme", "Jc");
addPeer("scheme", "Jvc");
addPeer("scheme", "JcAll");
addPeer("scheme", "JvcAll");
addPeer("scheme", "Mass");
addPeer("scheme", "CImp");
addPeer("scheme", "Ts");
addPeer("scheme", "JntLimit");
addPeer("scheme", "PoseIntRight");
addPeer("scheme", "PoseIntLeft");
addPeer("scheme", "ImpedanceIntRight");
addPeer("scheme", "ImpedanceIntLeft");
addPeer("scheme", "VG");
addPeer("scheme", "ToolIntRight");
addPeer("scheme", "ToolIntLeft");
addPeer("scheme", "JntImp");
addPeer("scheme", "FK");
addPeer("scheme", "TrajectoryGeneratorJoint");
addPeer("scheme", "HeadTrajectoryGeneratorJoint");
//addPeer("scheme", "HeadIK");
//addPeer("scheme", "PT");

//scheme.addBlock("TorsoPanTransmision");
//scheme.addBlock("TorsoPanTransmisionInv");
//scheme.addBlock("TorsoTiltTransmision");
scheme.addBlock("HeadPanVelocityLimiter");
scheme.addBlock("HeadTiltVelocityLimiter");
scheme.addBlock("HeadPanTransmision");
scheme.addBlock("HeadPanTransmisionInv");
scheme.addBlock("HeadTiltTransmision");
scheme.addBlock("HeadTiltTransmisionInv");
scheme.addBlock("HeadPosAggregate");
scheme.addBlock("HeadPosSplit");
//scheme.addBlock("TorsoTrqSplit");
//scheme.addBlock("TorsoPosAggregate");
//scheme.addBlock("TorsoVelAggregate");
scheme.addBlock("Jc");
scheme.addBlock("Jvc");
scheme.addBlock("JcAll");
scheme.addBlock("JvcAll");
scheme.addBlock("Mass");
scheme.addBlock("CImp");
scheme.addBlock("Ts");
scheme.addBlock("JntLimit");
scheme.addBlock("PoseIntRight");
scheme.addBlock("PoseIntLeft");
scheme.addBlock("ImpedanceIntRight");
scheme.addBlock("ImpedanceIntLeft");
scheme.latchConnections("CImp", "PoseIntRight", true);
scheme.latchConnections("CImp", "PoseIntLeft", true);
scheme.addBlock("VG");
scheme.addBlock("ToolIntRight");
scheme.addBlock("ToolIntLeft");
scheme.addBlock("JntImp");
scheme.addBlock("FK");
scheme.addBlock("TrajectoryGeneratorJoint");
scheme.addBlock("HeadTrajectoryGeneratorJoint");
//scheme.addBlock("HeadIK");
//scheme.addBlock("PT")
//------------------------------------------------------------------------------
//-- ROS Diagnostics
//------------------------------------------------------------------------------

loadComponent("JntPub", "JointStatePublisher");
setActivityOnCPU("JntPub", 0.002, 2, ORO_SCHED_RT, 0);
JntPub.loadService("rosparam");
JntPub.rosparam.getAll();

//connect("Jc.Out", "JntPub.JointPosition", ConnPolicy());
connect("JcAll.Out", "JntPub.JointPosition", ConnPolicy());
//connect("Jvc.Out", "JntPub.JointVelocity", ConnPolicy());
connect("JvcAll.Out", "JntPub.JointVelocity", ConnPolicy());
//connect("Jvc.Out", "JntPub.JointEffort", ConnPolicy());
connect("JvcAll.Out", "JntPub.JointEffort", ConnPolicy());
//connect("CImp.JointTorqueCommand", "JntPub.JointEffort", ConnPolicy());

stream("JntPub.joint_state", ros.comm.topic("/joint_states"));
stream("JntPub.joint_state", ros.comm.topic("/joint_states2"));

JntPub.configure()

//------------------------------------------------------------------------------
//-- ROS Command interface
//------------------------------------------------------------------------------
loadComponent("CartTrjRight", "CartesianTrajectoryAction");
setActivityOnCPU("CartTrjRight", 0.01, 1, ORO_SCHED_RT, 0);

connect("CartTrjRight.CartesianTrajectoryCommand", "PoseIntRight.CartesianTrajectoryCommand", ConnPolicy());
connect("CartTrjRight.CartesianPositionCommand", "PoseIntRight.CartesianPositionCommand", ConnPolicy());
connect("CartTrjRight.CartesianWrench", "VelmaSim.r_CartesianWrench_out", ConnPolicy());
connect("FK.RightPositionCommand_OUTPORT", "CartTrjRight.CartesianPosition", ConnPolicy())

stream("CartTrjRight.trajectory", ros.comm.topic("/right_arm/trajectory"));

CartTrjRight.configure();
CartTrjRight.loadService("actionlib")
CartTrjRight.actionlib.connect("/right_arm/cartesian_trajectory")

loadComponent("CartTrjLeft", "CartesianTrajectoryAction");
setActivityOnCPU("CartTrjLeft", 0.01, 1, ORO_SCHED_RT, 0);

connect("CartTrjLeft.CartesianTrajectoryCommand", "PoseIntLeft.CartesianTrajectoryCommand", ConnPolicy());
connect("CartTrjLeft.CartesianPositionCommand", "PoseIntLeft.CartesianPositionCommand", ConnPolicy());
connect("CartTrjLeft.CartesianWrench", "VelmaSim.l_CartesianWrench_out", ConnPolicy());
connect("FK.LeftPositionCommand_OUTPORT", "CartTrjLeft.CartesianPosition", ConnPolicy())

stream("CartTrjLeft.trajectory", ros.comm.topic("/left_arm/trajectory"));

CartTrjLeft.configure();
CartTrjLeft.loadService("actionlib")
CartTrjLeft.actionlib.connect("/left_arm/cartesian_trajectory")

// Joint

loadComponent("SplineTrajectoryActionJoint", "InternalSpaceSplineTrajectoryAction")
setActivityOnCPU("SplineTrajectoryActionJoint", 0.01 ,2 ,ORO_SCHED_RT, 0)
SplineTrajectoryActionJoint.loadService("rosparam");
SplineTrajectoryActionJoint.rosparam.getAll();
SplineTrajectoryActionJoint.loadService("actionlib")
SplineTrajectoryActionJoint.actionlib.connect("/spline_trajectory_action_joint")
connect("SplineTrajectoryActionJoint.trajectoryPtr", "TrajectoryGeneratorJoint.trajectoryPtr", ConnPolicy())
connect("Jc.Out","SplineTrajectoryActionJoint.JointPosition", ConnPolicy())
connect("TrajectoryGeneratorJoint.JointPositionCommand", "SplineTrajectoryActionJoint.JointPositionCommand", ConnPolicy())
SplineTrajectoryActionJoint.configure()



loadComponent("HeadSplineTrajectoryActionJoint", "InternalSpaceSplineTrajectoryAction")
setActivityOnCPU("HeadSplineTrajectoryActionJoint", 0.01 ,2 ,ORO_SCHED_RT, 0)
HeadSplineTrajectoryActionJoint.loadService("rosparam");
HeadSplineTrajectoryActionJoint.rosparam.getAll();
HeadSplineTrajectoryActionJoint.loadService("actionlib")
HeadSplineTrajectoryActionJoint.actionlib.connect("/head_spline_trajectory_action_joint")
connect("HeadSplineTrajectoryActionJoint.trajectoryPtr", "HeadTrajectoryGeneratorJoint.trajectoryPtr", ConnPolicy())
connect("HeadPosAggregate.OutputPort","HeadSplineTrajectoryActionJoint.JointPosition", ConnPolicy())
connect("HeadTrajectoryGeneratorJoint.JointPositionCommand", "HeadSplineTrajectoryActionJoint.JointPositionCommand", ConnPolicy())
HeadSplineTrajectoryActionJoint.configure()



// tool

loadComponent("CartToolRight", "CartesianTrajectoryAction");
setActivityOnCPU("CartToolRight", 0.01, 1, ORO_SCHED_RT, 0);
CartToolRight.configure()
CartToolRight.loadService("actionlib")
CartToolRight.actionlib.connect("/right_arm/tool_trajectory")
connect("CartToolRight.CartesianTrajectoryCommand","ToolIntRight.CartesianTrajectoryCommand", ConnPolicy())

loadComponent("CartToolLeft", "CartesianTrajectoryAction");
setActivityOnCPU("CartToolLeft", 0.01, 1, ORO_SCHED_RT, 0);
CartToolLeft.configure()
CartToolLeft.loadService("actionlib")
CartToolLeft.actionlib.connect("/left_arm/tool_trajectory")
connect("CartToolLeft.CartesianTrajectoryCommand","ToolIntLeft.CartesianTrajectoryCommand", ConnPolicy())

// impedance

loadComponent("CartImpRight", "CartesianImpedanceAction");
setActivityOnCPU("CartImpRight", 0.01, 1, ORO_SCHED_RT, 0);

connect("CartImpRight.CartesianImpedanceTrajectoryCommand", "ImpedanceIntRight.CartesianImpedanceTrajectoryCommand", ConnPolicy());

stream("CartImpRight.impedance", ros.comm.topic("/right_arm/impedance"));

CartImpRight.configure();
CartImpRight.loadService("actionlib")
CartImpRight.actionlib.connect("/right_arm/cartesian_impedance")

loadComponent("CartImpLeft", "CartesianImpedanceAction");
setActivityOnCPU("CartImpLeft", 0.01, 1, ORO_SCHED_RT, 0);

connect("CartImpLeft.CartesianImpedanceTrajectoryCommand", "ImpedanceIntLeft.CartesianImpedanceTrajectoryCommand", ConnPolicy());

stream("CartImpLeft.impedance", ros.comm.topic("/left_arm/impedance"));

CartImpLeft.configure();
CartImpLeft.loadService("actionlib")
CartImpLeft.actionlib.connect("/left_arm/cartesian_impedance")

//------------------------------------------------------------------------------

VelmaSim.start();

//EC.start();
//FRIr.start();
//FRIl.start();

LWRrDiag.start();
LWRlDiag.start();

TJ.start();

scheme.start();
//TorsoPanTransmision.start();
//TorsoPanTransmisionInv.start();
//TorsoTiltTransmision.start();
HeadPanTransmision.start();
HeadPanTransmisionInv.start();
HeadTiltTransmision.start();
HeadTiltTransmisionInv.start();
HeadPosSplit.start();
//TorsoTrqSplit.start();
//TorsoPosAggregate.start();
//TorsoVelAggregate.start();
HeadPosAggregate.start();
Jc.start();
Jvc.start();
JcAll.start();
JvcAll.start();
Ts.start();
Dwr.start();
Dwl.start();
Mass.start();
//CImp.start()
JntPub.start();
CartTrjRight.start();
CartTrjLeft.start();
ImpedanceIntRight.start();
ImpedanceIntLeft.start();
CartImpRight.start();
CartImpLeft.start();
//VG.start();
CartToolRight.start()
CartToolLeft.start()
ToolIntRight.start()
ToolIntLeft.start()
TGR.start()
TfPub.start()
TorquePubRight.start()
TorquePubLeft.start()
SplineTrajectoryActionJoint.start()
HeadSplineTrajectoryActionJoint.start()
FK.start()
rightHandMoveAction.start()
HeadTrajectoryGeneratorJoint.start()
//PT.start()
//HeadIK.start()
//waitForInterrupt()



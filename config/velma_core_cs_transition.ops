ros.import("rtt_barrett_hand_controller_msgs");

ros.import("eigen_typekit");
ros.import("rtt_control_msgs");
ros.import("controller_common");
ros.import("velma_controller");
ros.import("rtt_cartesian_trajectory_msgs");
ros.import("rtt_std_msgs");
ros.import("rtt_tf");
ros.import("port_operations")
ros.import("force_control");
ros.import("rtt_force_control_msgs");

ros.import("velma_core_cs");
ros.import("rtt_velma_core_cs_ve_body_msgs");
ros.import("rtt_velma_core_cs_ve_body_subsystem_ports");
ros.import("rtt_velma_core_cs_task_cs_msgs");
ros.import("rtt_velma_core_cs_task_cs_subsystem_ports");

ros.import("velma_task_cs_ros_interface");

## load head command limiters

loadComponent("HeadPanVelocityLimiter", "VelocityLimiter");
HeadPanVelocityLimiter.loadService("rosparam");
HeadPanVelocityLimiter.rosparam.getAll();

loadComponent("HeadTiltVelocityLimiter", "VelocityLimiter");
HeadTiltVelocityLimiter.loadService("rosparam");
HeadTiltVelocityLimiter.rosparam.getAll();

## load torso transmisions

loadComponent("TorsoPanTransmision", "SimpleTransmision");
TorsoPanTransmision.loadService("rosparam");
TorsoPanTransmision.rosparam.getAll();

loadComponent("TorsoPanTransmisionInv", "SimpleTransmisionInv");
TorsoPanTransmisionInv.loadService("rosparam");
TorsoPanTransmisionInv.rosparam.getAll();

## load head transmisions

loadComponent("HeadPanTransmision", "SimpleTransmision");
HeadPanTransmision.loadService("rosparam");
HeadPanTransmision.rosparam.getAll();

loadComponent("HeadPanTransmisionInv", "SimpleTransmisionInv");
HeadPanTransmisionInv.loadService("rosparam");
HeadPanTransmisionInv.rosparam.getAll();

//tilt
loadComponent("HeadTiltTransmision", "SimpleTransmision");
HeadTiltTransmision.loadService("rosparam");
HeadTiltTransmision.rosparam.getAll();

loadComponent("HeadTiltTransmisionInv", "SimpleTransmisionInv");
HeadTiltTransmisionInv.loadService("rosparam");
HeadTiltTransmisionInv.rosparam.getAll();

## load vector concatenations and splits
// torqure controlled joint concate
loadComponent("Jc", "VectorConcate1_7_7_0");
loadComponent("Jvc", "VectorConcate1_7_7_0");
loadComponent("JcAll", "VectorConcate15_2_8_8");
loadComponent("JvcAll", "VectorConcate15_2_8_8");

## load wrench decimators
loadComponent("Dwr", "DecimatorWrench");
setActivityOnCPU("Dwr", 0.01, 1, ORO_SCHED_RT, 0)

loadComponent("Dwl", "DecimatorWrench");
setActivityOnCPU("Dwl", 0.01, 1, ORO_SCHED_RT, 0)

## load mass matrix component

//loadComponent("Mass", "RobotMassMatrix15_2");
loadComponent("Mass", "MassTest15_2");
Mass.loadService("robot");
Mass.configure();

## load torque publishers

#loadComponent("TorquePubRight", "TorquePublisher7")
#setActivityOnCPU("TorquePubRight", 0.01, 1, ORO_SCHED_RT, 0)

#loadComponent("TorquePubLeft", "TorquePublisher7")
#setActivityOnCPU("TorquePubLeft", 0.01, 1, ORO_SCHED_RT, 0)

## load gravity component

#loadComponent("VG", "VelmaGrav");
#VG.configure();

## load camera trigger

loadComponent("TGR", "TriggerGenerator");
setActivityOnCPU("TGR", 0.1, 2, ORO_SCHED_RT, 1);
TGR.configure();

## torso transmision

connect("velma_core_cs_ve_body_msgs_StatusSplit.tMotor_q_OUTPORT",    "TorsoPanTransmision.MotorPosition_INPORT", ConnPolicy());
connect("velma_core_cs_ve_body_msgs_StatusSplit.tMotor_dq_OUTPORT",   "TorsoPanTransmision.MotorVelocity_INPORT", ConnPolicy());
connect("TorsoPanTransmisionInv.MotorCurrent_OUTPORT",  "velma_core_cs_ve_body_msgs_CommandConcate.tMotor_i_INPORT", ConnPolicy())


## camera trigger

//connect("TGR.Trigger", "EC.torso.subnode0.DigitalOutput1", ConnPolicy());
//connect("TGR.Trigger", "EC.torso.subnode0.DigitalOutput2", ConnPolicy());

## head command limiters

connect("velma_core_cs_ve_body_msgs_StatusSplit.hpMotor_q_OUTPORT",   "HeadPanVelocityLimiter.PositionMsr_INPORT", ConnPolicy());
connect("HeadPanVelocityLimiter.Position_OUTPORT",   "velma_core_cs_ve_body_msgs_CommandConcate.hpMotor_q_INPORT", ConnPolicy());

connect("velma_core_cs_ve_body_msgs_StatusSplit.htMotor_q_OUTPORT",   "HeadTiltVelocityLimiter.PositionMsr_INPORT", ConnPolicy());
connect("HeadTiltVelocityLimiter.Position_OUTPORT",  "velma_core_cs_ve_body_msgs_CommandConcate.htMotor_q_INPORT", ConnPolicy());

## head transmisions

connect("velma_core_cs_ve_body_msgs_StatusSplit.hpMotor_q_OUTPORT",   "HeadPanTransmision.MotorPosition_INPORT", ConnPolicy());
connect("velma_core_cs_ve_body_msgs_StatusSplit.hpMotor_dq_OUTPORT",  "HeadPanTransmision.MotorVelocity_INPORT", ConnPolicy());

connect("HeadPanTransmisionInv.MotorCurrent_OUTPORT",   "velma_core_cs_ve_body_msgs_CommandConcate.hpMotor_i_INPORT", ConnPolicy())
connect("HeadPanTransmisionInv.MotorVelocity_OUTPORT",  "velma_core_cs_ve_body_msgs_CommandConcate.hpMotor_dq_INPORT", ConnPolicy())

connect("velma_core_cs_ve_body_msgs_StatusSplit.htMotor_q_OUTPORT",   "HeadTiltTransmision.MotorPosition_INPORT", ConnPolicy());
connect("velma_core_cs_ve_body_msgs_StatusSplit.htMotor_dq_OUTPORT",  "HeadTiltTransmision.MotorVelocity_INPORT", ConnPolicy());

connect("HeadTiltTransmisionInv.MotorCurrent_OUTPORT",  "velma_core_cs_ve_body_msgs_CommandConcate.htMotor_i_INPORT", ConnPolicy())
connect("HeadTiltTransmisionInv.MotorVelocity_OUTPORT", "velma_core_cs_ve_body_msgs_CommandConcate.htMotor_dq_INPORT", ConnPolicy())

## vector concatenations and splits

connect("velma_core_cs_ve_body_msgs_StatusSplit.rArm_q_OUTPORT",  "Jc.In1", ConnPolicy());
connect("velma_core_cs_ve_body_msgs_StatusSplit.lArm_q_OUTPORT",  "Jc.In2", ConnPolicy());

connect("velma_core_cs_ve_body_msgs_StatusSplit.rArm_dq_OUTPORT", "Jvc.In1", ConnPolicy());
connect("velma_core_cs_ve_body_msgs_StatusSplit.lArm_dq_OUTPORT", "Jvc.In2", ConnPolicy());

connect("velma_core_cs_ve_body_msgs_StatusSplit.rHand_q_OUTPORT", "JcAll.In2", ConnPolicy());
connect("velma_core_cs_ve_body_msgs_StatusSplit.lHand_q_OUTPORT", "JcAll.In3", ConnPolicy());

connect("velma_core_cs_ve_body_msgs_StatusSplit.rHand_q_OUTPORT", "JvcAll.In2", ConnPolicy());
connect("velma_core_cs_ve_body_msgs_StatusSplit.lHand_q_OUTPORT", "JvcAll.In3", ConnPolicy());

loadComponent("Ts", "VectorSplit1_7_7_0");
connect("Ts.Out1", "velma_core_cs_ve_body_msgs_CommandConcate.rArm_t_INPORT", ConnPolicy());
connect("Ts.Out2", "velma_core_cs_ve_body_msgs_CommandConcate.lArm_t_INPORT", ConnPolicy());

## wrench decimators

connect("velma_core_cs_ve_body_msgs_StatusSplit.rArm_w_OUTPORT",  "Dwr.In", ConnPolicy());
connect("velma_core_cs_ve_body_msgs_StatusSplit.lArm_w_OUTPORT",  "Dwl.In", ConnPolicy());

## mass matrix component

connect("velma_core_cs_ve_body_msgs_StatusSplit.lArm_mmx_OUTPORT" , "Mass.MassMatrixLeft_INPORT", ConnPolicy());
connect("velma_core_cs_ve_body_msgs_StatusSplit.rArm_mmx_OUTPORT" , "Mass.MassMatrixRight_INPORT", ConnPolicy());

## torque publishers

#connect("velma_core_cs_ve_body_msgs_StatusSplit.rArm_t_OUTPORT",  "TorquePubRight.InJointTorque", ConnPolicy())
#connect("velma_core_cs_ve_body_msgs_StatusSplit.rArm_gt_OUTPORT", "TorquePubRight.InGravityTorque", ConnPolicy())

#connect("velma_core_cs_ve_body_msgs_StatusSplit.lArm_t_OUTPORT",  "TorquePubLeft.InJointTorque", ConnPolicy())
#connect("velma_core_cs_ve_body_msgs_StatusSplit.lArm_gt_OUTPORT", "TorquePubLeft.InGravityTorque", ConnPolicy())

## gravity component

#connect("velma_core_cs_ve_body_msgs_StatusSplit.lArm_gt_OUTPORT", "VG.GravTrqLeft", ConnPolicy());
#connect("velma_core_cs_ve_body_msgs_StatusSplit.rArm_gt_OUTPORT", "VG.GravTrqRight", ConnPolicy());


##
## start interface components
##

#start_interface_components();

##

#stream("velma_core_cs_ve_body_msgs_StatusSplit.rArm_w_OUTPORT", ros.comm.topic("/right_arm/wrench"));
#stream("velma_core_cs_ve_body_msgs_StatusSplit.lArm_w_OUTPORT", ros.comm.topic("/left_arm/wrench"));

#stream("Dwr.Out", ros.comm.topic("/right_arm/wrench"));
#stream("Dwl.Out", ros.comm.topic("/left_arm/wrench"));

connect("Jc.Out", "Mass.JointPosition_INPORT", ConnPolicy());

connect("HeadPanTransmisionInv.MotorPosition_OUTPORT", "HeadPanVelocityLimiter.Position_INPORT", ConnPolicy())
connect("HeadTiltTransmisionInv.MotorPosition_OUTPORT", "HeadTiltVelocityLimiter.Position_INPORT", ConnPolicy())


//------------------------------------------------------------------------------
//-- Torso Joystick Teleop
//------------------------------------------------------------------------------

loadComponent("TJ", "TorsoTeleopJoy")
setActivityOnCPU("TJ", 0.01, 6, ORO_SCHED_RT, 0)
TJ.loadService("rosparam");
TJ.rosparam.getAll();
TJ.configure();

#stream("TJ.Joy_INPORT", ros.comm.topic("/joy"));

//------------------------------------------------------------------------------
//-- Camera Trigger
//------------------------------------------------------------------------------

#stream("TGR.TriggerStamp", ros.comm.topic("/camera_trigger_stamp"));

//------------------------------------------------------------------------------
//-- Velma controller
//------------------------------------------------------------------------------

// Head position aggregate
loadComponent("HeadPosAggregate","PortDoubleAggregate2")
HeadPosAggregate.configure()

connect("HeadPosAggregate.InputPort_0", "HeadPanTransmision.JointPosition_OUTPORT", ConnPolicy())
connect("HeadPosAggregate.InputPort_1", "HeadTiltTransmision.JointPosition_OUTPORT", ConnPolicy())

// Head Velocity port aggregate
loadComponent("HeadVelAggregate","PortDoubleAggregate2")
HeadVelAggregate.configure()

connect("HeadVelAggregate.InputPort_0", "HeadPanTransmision.JointVelocity_OUTPORT", ConnPolicy())
connect("HeadVelAggregate.InputPort_1", "HeadTiltTransmision.JointVelocity_OUTPORT", ConnPolicy())

// Head PositionCommand split

loadComponent("HeadPosSplit","PortDoubleSplit2")
HeadPosSplit.configure()

connect("HeadPosSplit.OutputPort_0", "HeadPanTransmisionInv.JointPosition_INPORT", ConnPolicy())
connect("HeadPosSplit.OutputPort_1", "HeadTiltTransmisionInv.JointPosition_INPORT", ConnPolicy())

// Torso Position port aggregate
loadComponent("TorsoPosAggregate","PortDoubleAggregate1")
TorsoPosAggregate.configure()
connect("TorsoPosAggregate.OutputPort", "Jc.In0", ConnPolicy());
connect("TorsoPanTransmision.JointPosition_OUTPORT", "TorsoPosAggregate.InputPort_0", ConnPolicy())

// Torso Velocity port aggregate
loadComponent("TorsoVelAggregate","PortDoubleAggregate1")
TorsoVelAggregate.configure()
connect("TorsoVelAggregate.OutputPort", "Jvc.In0", ConnPolicy());
connect("TorsoPanTransmision.JointVelocity_OUTPORT", "TorsoVelAggregate.InputPort_0", ConnPolicy())

connect("Jc.Out", "JcAll.In0", ConnPolicy());
connect("HeadPosAggregate.OutputPort", "JcAll.In1", ConnPolicy());

connect("Jvc.Out", "JvcAll.In0", ConnPolicy());

#connect("Ts.Out0", "TorsoTrqSplit.InputPort", ConnPolicy());

// Torso torque port spliter
loadComponent("TorsoTrqSplit","PortDoubleSplit1")
TorsoTrqSplit.configure()
connect("TorsoTrqSplit.OutputPort_0", "TorsoPanTransmisionInv.JointTorque_INPORT", ConnPolicy())
connect("Ts.Out0", "TorsoTrqSplit.InputPort", ConnPolicy());

connect("HeadVelAggregate.OutputPort", "JvcAll.In1", ConnPolicy());

loadComponent("CImp", "CartesianImpedance15_2");
CImp.loadService("robot");
CImp.configure();

connect("Jc.Out", "CImp.JointPosition_INPORT", ConnPolicy());
connect("Jvc.Out", "CImp.JointVelocity_INPORT", ConnPolicy());
connect("Mass.MassMatrix_OUTPORT", "CImp.MassMatrixInv_INPORT", ConnPolicy());

connect("CImp.JointTorqueCommand_OUTPORT", "Ts.In", ConnPolicy());

loadComponent("PoseIntRight", "CartesianInterpolatorNew");
connect("PoseIntRight.CartesianPositionCommand_OUTPORT", "CImp.CartPositionCommand0_INPORT", ConnPolicy());
connect("velma_core_cs_task_cs_msgs_CommandSplit.cart_r_pose_OUTPORT", "PoseIntRight.CartesianTrajectoryCommand_INPORT", ConnPolicy());

loadComponent("PoseIntLeft", "CartesianInterpolatorNew");
connect("PoseIntLeft.CartesianPositionCommand_OUTPORT", "CImp.CartPositionCommand1_INPORT", ConnPolicy());
connect("velma_core_cs_task_cs_msgs_CommandSplit.cart_l_pose_OUTPORT", "PoseIntLeft.CartesianTrajectoryCommand_INPORT", ConnPolicy());

// tool

loadComponent("ToolIntRight", "CartesianInterpolatorNew")
ToolIntRight.configure();
ToolIntRight.loadService("rosparam");
ToolIntRight.rosparam.getAll();
connect("ToolIntRight.CartesianPositionCommand_OUTPORT", "CImp.ToolPositionCommand0_INPORT", ConnPolicy())
connect("velma_core_cs_task_cs_msgs_CommandSplit.cart_r_tool_OUTPORT", "ToolIntRight.CartesianTrajectoryCommand_INPORT", ConnPolicy());

loadComponent("ToolIntLeft", "CartesianInterpolatorNew")
ToolIntLeft.configure();
ToolIntLeft.loadService("rosparam");
ToolIntLeft.rosparam.getAll();
connect("ToolIntLeft.CartesianPositionCommand_OUTPORT", "CImp.ToolPositionCommand1_INPORT", ConnPolicy())
connect("velma_core_cs_task_cs_msgs_CommandSplit.cart_l_tool_OUTPORT", "ToolIntLeft.CartesianTrajectoryCommand_INPORT", ConnPolicy());

#loadComponent("TfPub", "TfPublisher")
#setActivityOnCPU("TfPub", 0.01, 1, ORO_SCHED_RT, 0)
#TfPub.loadService("rosparam");
#TfPub.rosparam.getAll();
#TfPub.configure();
#connect("ToolIntRight.CartesianPositionCommand_OUTPORT", "TfPub.In0", ConnPolicy())
#connect("ToolIntLeft.CartesianPositionCommand_OUTPORT", "TfPub.In1", ConnPolicy())
#connect("PoseIntRight.CartesianPositionCommand_OUTPORT", "TfPub.In2", ConnPolicy())
#connect("PoseIntLeft.CartesianPositionCommand_OUTPORT", "TfPub.In3", ConnPolicy())

#stream("TfPub.OutTf", ros.comm.topic("/tf"))

#connect("Ts.Out1", "TorquePubRight.InJointTorqueCommand", ConnPolicy())
#TorquePubRight.configure();
#stream("TorquePubRight.OutTorques", ros.comm.topic("/right_arm/torques"))

#connect("Ts.Out1", "TorquePubLeft.InJointTorqueCommand", ConnPolicy())
#TorquePubLeft.configure();
#stream("TorquePubLeft.OutTorques", ros.comm.topic("/left_arm/torques"))

// impedance

loadComponent("ImpedanceIntRight", "CartesianImpedanceInterpolator");
connect("ImpedanceIntRight.CartesianImpedanceCommand_OUTPORT", "CImp.CartImpedanceCommand0_INPORT", ConnPolicy());
#TODO
#connect("velma_core_cs_task_cs_msgs_CommandSplit.cart_r_imp_OUTPORT", "ImpedanceIntRight.TODO", ConnPolicy());


loadComponent("ImpedanceIntLeft", "CartesianImpedanceInterpolator");
connect("ImpedanceIntLeft.CartesianImpedanceCommand_OUTPORT", "CImp.CartImpedanceCommand1_INPORT", ConnPolicy());
#TODO
#connect("velma_core_cs_task_cs_msgs_CommandSplit.cart_l_imp_OUTPORT", "ImpedanceIntLeft.TODO", ConnPolicy());

loadComponent("JntImp", "JointImpedance15")
JntImp.loadService("rosparam");
JntImp.rosparam.getAll();

connect("Jc.Out", "JntImp.JointPosition_INPORT", ConnPolicy());
connect("Jvc.Out", "JntImp.JointVelocity_INPORT", ConnPolicy());
connect("Mass.MassMatrix_OUTPORT", "JntImp.MassMatrix_INPORT", ConnPolicy());
connect("JntImp.JointTorqueCommand_OUTPORT", "Ts.In", ConnPolicy());

loadComponent("FK", "VelmaFK");
FK.loadService("robot");

connect("ToolIntLeft.CartesianPositionCommand_OUTPORT", "FK.LeftTool_INPORT", ConnPolicy())
connect("ToolIntRight.CartesianPositionCommand_OUTPORT", "FK.RightTool_INPORT", ConnPolicy())

connect("Jc.Out", "FK.JointPosition_INPORT", ConnPolicy())

connect("FK.LeftPosition_OUTPORT", "PoseIntLeft.CartesianPosition_INPORT", ConnPolicy())
connect("FK.RightPosition_OUTPORT", "PoseIntRight.CartesianPosition_INPORT", ConnPolicy())

#connect("FK.RightPosition_OUTPORT", "TfPub.In4", ConnPolicy())
#connect("FK.LeftPosition_OUTPORT", "TfPub.In5", ConnPolicy())

## Force transformation

loadComponent("RightForceTransformation", "ForceTransformation")
RightForceTransformation.loadService("rosparam");
RightForceTransformation.rosparam.getAll();
RightForceTransformation.configure()

connect("RightForceTransformation.CurrentWristPose", "FK.RightWrist_OUTPORT", ConnPolicy())
connect("velma_core_cs_ve_body_msgs_StatusSplit.rFt_sfw_OUTPORT", "RightForceTransformation.CurrentSensorSlowFilteredWrench", ConnPolicy())
connect("velma_core_cs_ve_body_msgs_StatusSplit.rFt_rw_OUTPORT",  "RightForceTransformation.CurrentSensorFastFilteredWrench", ConnPolicy())
connect("RightForceTransformation.Tool", "ToolIntRight.CartesianPositionCommand_OUTPORT", ConnPolicy())

#stream("RightForceTransformation.ToolGravityParam", ros.comm.topic("/right_arm/tg_param"))
#stream("RightForceTransformation.OutputEndEffectorWrench", ros.comm.topic("/right_arm/transformed_wrench"))

loadComponent("LeftForceTransformation", "ForceTransformation")
LeftForceTransformation.loadService("rosparam");
LeftForceTransformation.rosparam.getAll();
LeftForceTransformation.configure()

connect("LeftForceTransformation.CurrentWristPose", "FK.LeftWrist_OUTPORT", ConnPolicy())
connect("velma_core_cs_ve_body_msgs_StatusSplit.lFt_sfw_OUTPORT", "LeftForceTransformation.CurrentSensorSlowFilteredWrench", ConnPolicy())
connect("velma_core_cs_ve_body_msgs_StatusSplit.lFt_rw_OUTPORT",  "LeftForceTransformation.CurrentSensorFastFilteredWrench", ConnPolicy())
connect("LeftForceTransformation.Tool", "ToolIntLeft.CartesianPositionCommand_OUTPORT", ConnPolicy())

#stream("LeftForceTransformation.ToolGravityParam", ros.comm.topic("/left_arm/tg_param"))
#stream("LeftForceTransformation.OutputEndEffectorWrench", ros.comm.topic("/left_arm/transformed_wrench"))

## ForceControlLaw

loadComponent("RightForceControl", "ForceControlLaw")
RightForceControl.configure()
connect("RightForceControl.OutputEndEffectorPose", "CImp.CartPositionCommand0_INPORT", ConnPolicy())
connect("RightForceControl.CurrentEndEffectorPose", "FK.RightPosition_OUTPORT", ConnPolicy())
connect("RightForceTransformation.OutputEndEffectorWrench", "RightForceControl.CurrentEndEffectorWrench", ConnPolicy())
//connect("RightForceControl.IsSynchronisedIn","Irp6otHardwareInterface.IsSynchronised", ConnPolicy())
//connect("RightForceControl.GeneratorActiveOut","Irp6otHardwareInterface.GeneratorActiveIn", ConnPolicy())
#stream("RightForceControl.CurrentFclParam", ros.comm.topic("/right_arm/fcl_param"))

loadComponent("LeftForceControl", "ForceControlLaw")
LeftForceControl.configure()
connect("LeftForceControl.OutputEndEffectorPose", "CImp.CartPositionCommand1_INPORT", ConnPolicy())
connect("LeftForceControl.CurrentEndEffectorPose", "FK.LeftPosition_OUTPORT", ConnPolicy())
connect("LeftForceTransformation.OutputEndEffectorWrench", "LeftForceControl.CurrentEndEffectorWrench", ConnPolicy())
//connect("LeftForceControl.IsSynchronisedIn","Irp6otHardwareInterface.IsSynchronised", ConnPolicy())
//connect("LeftForceControl.GeneratorActiveOut","Irp6otHardwareInterface.GeneratorActiveIn", ConnPolicy())
#stream("LeftForceControl.CurrentFclParam", ros.comm.topic("/left_arm/fcl_param"))

## joint trajectory generator

loadComponent("TrajectoryGeneratorJoint", "VelmaInternalSpaceSplineTrajectoryGenerator");
TrajectoryGeneratorJoint.loadService("rosparam");
TrajectoryGeneratorJoint.rosparam.getAll();
connect("Jc.Out","TrajectoryGeneratorJoint.JointPosition_INPORT", ConnPolicy());
connect("TrajectoryGeneratorJoint.JointPositionCommand_OUTPORT","JntImp.JointPositionCommand_INPORT", ConnPolicy());

connect("velma_core_cs_task_cs_msgs_CommandSplit.jnt_OUTPORT", "TrajectoryGeneratorJoint.jnt_INPORT", ConnPolicy());


loadComponent("JntLimit", "JointLimitAvoidance15");
JntLimit.loadService("rosparam");
JntLimit.rosparam.getAll();

connect("Jc.Out", "JntLimit.JointPosition_INPORT", ConnPolicy());
connect("Jvc.Out", "JntLimit.JointVelocity_INPORT", ConnPolicy());
connect("Mass.MassMatrix_OUTPORT", "JntLimit.MassMatrix_INPORT", ConnPolicy());
connect("JntLimit.JointTorqueCommand_OUTPORT", "CImp.NullSpaceTorqueCommand_INPORT", ConnPolicy());


//connect("TJ.NullSpaceTorqueCommand_OUTPORT", "JntLimit.NullSpaceTorqueCommand_INPORT", ConnPolicy());
#connect("VG.GravTrq", "JntLimit.NullSpaceTorqueCommand_INPORT", ConnPolicy());

// head look-at

//loadComponent("HeadIK", "HeadLookAt3D")
//HeadIK.loadService("rosparam");
//HeadIK.rosparam.getAll();
//HeadIK.configure();

//loadComponent("PT", "PoseTransform")
//PT.loadService("rosparam");
//PT.rosparam.getAll();
//PT.configure();

//connect("PT.SecondaryTargetPoint", "HeadIK.TargetPoint_INPORT", ConnPolicy());

//if ((os.isenv("HEAD_JOY") == false) || (os.getenv("HEAD_JOY") == "true")) then {
//  connect("TJ.PrimaryFrameSelector_OUTPORT", "PT.PrimaryFrameSelector", ConnPolicy());
//  connect("TJ.HeadTargetPoint_OUTPORT", "PT.PrimaryTargetPoint", ConnPolicy());
//  connect("FK.RightPosition_OUTPORT", "PT.PrimaryFrame1", ConnPolicy());
//  connect("FK.LeftPosition_OUTPORT", "PT.PrimaryFrame2", ConnPolicy());
//  stream("PT.PrimaryTargetPassThrough", ros.comm.topic("/head_lookat_pose"));
//}
//else {
//    stream("HeadIK.TargetPoint_INPORT", ros.comm.topic("/head_lookat_pose"));
//}

//stream("PT.PrimaryTargetPoint", ros.comm.topic("/head_lookat_pose"));

//connect("HeadPosSplit.InputPort", "HeadIK.HeadJointPositionCommand_OUTPORT", ConnPolicy());
////connect("TorsoPosAggregate.OutputPort", "HeadIK.JointPosition_INPORT", ConnPolicy());




loadComponent("HeadTrajectoryGeneratorJoint", "InternalSpaceSplineTrajectoryGenerator2");
HeadTrajectoryGeneratorJoint.loadService("rosparam");
HeadTrajectoryGeneratorJoint.rosparam.getAll();
connect("HeadPosAggregate.OutputPort","HeadTrajectoryGeneratorJoint.JointPosition_INPORT", ConnPolicy());
connect("HeadTrajectoryGeneratorJoint.JointPositionCommand_OUTPORT","HeadPosSplit.InputPort", ConnPolicy());

loadComponent("safe", "velma_core_cs_types::SafeComponent");
connect("safe.cmd_sc_OUTPORT","velma_core_cs_ve_body_msgs_CommandConcate.sc_INPORT", ConnPolicy())
connect("master_component.velma_core_cs_ve_body_msgs_Status_OUTPORT","safe.status_INPORT", ConnPolicy());
connect("Jc.Out","safe.JointPosition_INPORT", ConnPolicy());
connect("safe.JointPositionCommand_OUTPORT","JntImp.JointPositionCommand_INPORT", ConnPolicy());
connect("safe.JointStiffnessCommand_OUTPORT","JntImp.JointStiffnessCommand_INPORT", ConnPolicy());

// CONFIGURE
Jc.configure();
Jvc.configure();
JcAll.configure();
JvcAll.configure();
Ts.configure();
Dwr.configure();
Dwl.configure();
PoseIntRight.configure();
PoseIntLeft.configure();
ImpedanceIntRight.configure()
ImpedanceIntLeft.configure()
JntLimit.configure();
TrajectoryGeneratorJoint.configure();
HeadTrajectoryGeneratorJoint.configure();
FK.configure();
JntImp.configure();

#scheme.latchConnections("CImp", "PoseIntRight", true);
#scheme.latchConnections("CImp", "PoseIntLeft", true);


//------------------------------------------------------------------------------
//-- ROS Diagnostics
//------------------------------------------------------------------------------

//loadComponent("JntPub", "JointStatePublisher33");
//setActivityOnCPU("JntPub", 0.002, 2, ORO_SCHED_RT, 0);
//JntPub.loadService("rosparam");
//JntPub.rosparam.getAll();

//connect("JcAll.Out", "JntPub.JointPosition", ConnPolicy());
//connect("JvcAll.Out", "JntPub.JointVelocity", ConnPolicy());
//connect("JvcAll.Out", "JntPub.JointEffort", ConnPolicy());
//connect("CImp.JointTorqueCommand_OUTPORT", "JntPub.JointEffort", ConnPolicy());

//stream("JntPub.joint_state", ros.comm.topic("/joint_states"));
//stream("JntPub.joint_state", ros.comm.topic("/joint_states2"));

//JntPub.configure()


connect("velma_core_cs_ve_body_msgs_StatusSplit.test_OUTPORT","velma_core_cs_ve_body_msgs_CommandConcate.test_INPORT", ConnPolicy())

connect("JcAll.Out", "velma_core_cs_task_cs_msgs_StatusConcate.q_INPORT", ConnPolicy());
connect("JvcAll.Out", "velma_core_cs_task_cs_msgs_StatusConcate.dq_INPORT", ConnPolicy());



//------------------------------------------------------------------------------

TJ.start();

TorsoPanTransmision.start();
TorsoPanTransmisionInv.start();
HeadPanTransmision.start();
HeadPanTransmisionInv.start();
HeadTiltTransmision.start();
HeadTiltTransmisionInv.start();
HeadPanVelocityLimiter.start();
HeadTiltVelocityLimiter.start();
HeadPosSplit.start();
HeadPosAggregate.start();
TorsoTrqSplit.start();
TorsoPosAggregate.start();
TorsoVelAggregate.start();
Jc.start();
Jvc.start();
JcAll.start();
JvcAll.start();
Ts.start();
#Dwr.start();
#Dwl.start();
//JntPub.start();
ImpedanceIntRight.start();
ImpedanceIntLeft.start();
ToolIntRight.start();
ToolIntLeft.start();
#TGR.start();
FK.start();
Mass.start();

#TfPub.start();
#TorquePubRight.start();
#TorquePubLeft.start();


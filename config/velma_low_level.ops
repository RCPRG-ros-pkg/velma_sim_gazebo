import("rtt_ros");
import("rtt_roscomm");
import("rtt_rosparam");
require("os")

ros.import("rtt_rosclock");
ros.import("rtt_rospack")
ros.import("rtt_actionlib");
ros.import("rtt_barrett_hand_controller_msgs");
ros.import("rtt_geometry_msgs");
ros.import("rtt_velma_low_level_interface_msgs");
ros.import("velma_low_level_interface");

ros.import("eigen_typekit");
ros.import("rtt_std_msgs");
ros.import("port_operations");

ros.import("conman");
ros.import("conman_ros");

ros.import("rtt_control_msgs");
ros.import("lwr_fri");
ros.import("oro_joint_state_publisher");
ros.import("controller_common");
ros.import("velma_controller");
ros.import("rtt_cartesian_trajectory_msgs");
ros.import("rtt_std_msgs");
ros.import("rtt_tf");
ros.import("internal_space_spline_trajectory_action");
ros.import("internal_space_spline_trajectory_generator");
ros.import("velma_sim_gazebo");
ros.import("velma_low_level_safety");

//------------------------------------------------------------------------------
//-- Simulation interface
//------------------------------------------------------------------------------

bool useSimulationTime()   { return true; }

setActivityOnCPU("TorsoSim", 0.001, 6, ORO_SCHED_RT, 3);
TorsoSim.loadService("sim_clock_activity");
TorsoSim.loadService("rosparam");
TorsoSim.rosparam.getAll();

if (!TorsoSim.configure()) then {
    kickOutAll();
}

setActivityOnCPU("LWRrSim", 0.001, 6, ORO_SCHED_RT, 3)
LWRrSim.loadService("sim_clock_activity")
LWRrSim.loadService("rosparam")
LWRrSim.rosparam.getAll()
LWRrSim.configure()

setActivityOnCPU("LWRlSim", 0.001, 6, ORO_SCHED_RT, 3)
LWRlSim.loadService("sim_clock_activity")
LWRlSim.loadService("rosparam")
LWRlSim.rosparam.getAll()
LWRlSim.configure()

setActivityOnCPU("RightHandTactile", 0.025, 6, ORO_SCHED_RT, 3)
RightHandTactile.loadService("sim_clock_activity")
RightHandTactile.loadService("rosparam")
RightHandTactile.rosparam.getAll()
RightHandTactile.configure()

#stream("RightHandTactile.BHPressureState_OUTPORT", ros.comm.topic("/right_hand/BHPressureState"))
#stream("RightHandTactile.calibrate_tactile_sensors_INPORT", ros.comm.topic("/right_hand/calibrate_tactile_sensors"))
#stream("RightHandTactile.set_median_filter_INPORT", ros.comm.topic("/right_hand/set_median_filter"))
#stream("RightHandTactile.tactile_info_OUTPORT", ros.comm.topic("/right_hand/tactile_info_out"))
//connect("RightHandTactile.max_measured_pressure_OUTPORT", "Hand.max_measured_pressure_in", ConnPolicy());

setActivityOnCPU("LeftHandOptoforce", 0.025, 6, ORO_SCHED_RT, 3)
LeftHandOptoforce.loadService("sim_clock_activity")
LeftHandOptoforce.loadService("rosparam")
LeftHandOptoforce.rosparam.getAll()
LeftHandOptoforce.configure()

// TODO: uncomment
//stream("LeftHandOptoforce.force_0_OUTPORT", ros.comm.topic("/left_hand/optoforce/force_0"))
//stream("LeftHandOptoforce.force_1_OUTPORT", ros.comm.topic("/left_hand/optoforce/force_1"))
//stream("LeftHandOptoforce.force_2_OUTPORT", ros.comm.topic("/left_hand/optoforce/force_2"))

setActivityOnCPU("RightHand", 0.001, 6, ORO_SCHED_RT, 3)
RightHand.loadService("sim_clock_activity")
RightHand.loadService("rosparam")
RightHand.rosparam.getAll()
RightHand.configure()

setActivityOnCPU("LeftHand", 0.001, 6, ORO_SCHED_RT, 3)
LeftHand.loadService("sim_clock_activity")
LeftHand.loadService("rosparam")
LeftHand.rosparam.getAll()
LeftHand.configure()

// F/T sensors

setActivityOnCPU("LeftFtSensor", 0.001, 6, ORO_SCHED_RT, 3)
LeftFtSensor.loadService("sim_clock_activity")
LeftFtSensor.loadService("rosparam")
LeftFtSensor.rosparam.getAll()
LeftFtSensor.configure()
#stream("LeftFtSensor.rawWrench_OUTPORT", ros.comm.topic("/left_arm/ft_sensor/wrench"))

setActivityOnCPU("RightFtSensor", 0.001, 6, ORO_SCHED_RT, 3)
RightFtSensor.loadService("sim_clock_activity")
RightFtSensor.loadService("rosparam")
RightFtSensor.rosparam.getAll()
RightFtSensor.configure()
#stream("RightFtSensor.rawWrench_OUTPORT", ros.comm.topic("/right_arm/ft_sensor/wrench"))
#stream("RightFtSensor.fastFilteredWrench_OUTPORT", ros.comm.topic("/right_arm/ft_sensor/wrench_fast"))
#stream("RightFtSensor.slowFilteredWrench_OUTPORT", ros.comm.topic("/right_arm/ft_sensor/wrench_slow"))








#
# the low level interfaces
#

var ConnPolicy cpTx;
cpTx.transport = 2;                 # the MQueue protocol id
cpTx.name_id   = "/lli_status";     # the connection id

loadComponent("lli_lo_tx","VelmaLLILoTx")
setActivity("lli_lo_tx", 0, 1, ORO_SCHED_RT);
lli_lo_tx.configure();
stream("lli_lo_tx.status_OUTPORT", cpTx);

loadComponent("lli_lo_rx","VelmaLLILoRx")
setActivity("lli_lo_rx", 0, 1, ORO_SCHED_RT);
lli_lo_rx.configure();

#
# the safety component
#
loadComponent("safety_controller","VelmaLowLevelSafety");
setActivity("safety_controller", 0, 1, ORO_SCHED_RT);
safety_controller.loadService("rosparam")
safety_controller.rosparam.getAll()
safety_controller.configure();


connect("lli_lo_rx.command_OUTPORT",            "safety_controller.command_INPORT", ConnPolicy())
connect("safety_controller.status_OUTPORT",     "lli_lo_tx.status_INPORT", ConnPolicy())

# command
connect("safety_controller.cmd_rArm_t_OUTPORT",         "LWRrSim.JointTorqueCommand_INPORT", ConnPolicy())
connect("safety_controller.cmd_rArm_cmd_OUTPORT",       "LWRrSim.KRL_CMD_INPORT", ConnPolicy())
connect("safety_controller.cmd_rHand_q_OUTPORT",        "RightHand.q_INPORT", ConnPolicy())
connect("safety_controller.cmd_rHand_dq_OUTPORT",       "RightHand.v_INPORT", ConnPolicy())
#connect("safety_controller.cmd_rHand_max_p_OUTPORT",    "RightHand.mp_INPORT", ConnPolicy())   # TODO
connect("safety_controller.cmd_rHand_max_i_OUTPORT",    "RightHand.t_INPORT", ConnPolicy())
#connect("safety_controller.cmd_rHand_hold_OUTPORT",     "RightHand.hold_INPORT", ConnPolicy()) # TODO

connect("safety_controller.cmd_lArm_t_OUTPORT",         "LWRlSim.JointTorqueCommand_INPORT", ConnPolicy())
connect("safety_controller.cmd_lArm_cmd_OUTPORT",       "LWRlSim.KRL_CMD_INPORT", ConnPolicy())
connect("safety_controller.cmd_lHand_q_OUTPORT",        "LeftHand.q_INPORT", ConnPolicy())
connect("safety_controller.cmd_lHand_dq_OUTPORT",       "LeftHand.v_INPORT", ConnPolicy())
#connect("safety_controller.cmd_lHand_max_p_OUTPORT",    "LeftHand.mp_INPORT", ConnPolicy())    # TODO
connect("safety_controller.cmd_lHand_max_i_OUTPORT",    "LeftHand.t_INPORT", ConnPolicy())
#connect("safety_controller.cmd_lHand_hold_OUTPORT",     "LeftHand.hold_INPORT", ConnPolicy())  # TODO

#connect("safety_controller.cmd_rHand_tactileCmd_OUTPORT",   "RightHandTactile.calibrate_tactile_sensors_INPORT", ConnPolicy()) # TODO
connect("safety_controller.cmd_tMotor_i_OUTPORT",           "TorsoSim.t_MotorCurrentCommand_INPORT", ConnPolicy())
connect("safety_controller.cmd_hpMotor_i_OUTPORT",          "TorsoSim.head_pan_motor_current_command_INPORT", ConnPolicy())
connect("safety_controller.cmd_htMotor_i_OUTPORT",          "TorsoSim.head_tilt_motor_current_command_INPORT", ConnPolicy())
connect("safety_controller.cmd_hpMotor_q_OUTPORT",          "TorsoSim.head_pan_motor_position_command_INPORT", ConnPolicy())
connect("safety_controller.cmd_htMotor_q_OUTPORT",          "TorsoSim.head_tilt_motor_position_command_INPORT", ConnPolicy())
connect("safety_controller.cmd_hpMotor_dq_OUTPORT",         "TorsoSim.head_pan_motor_velocity_command_INPORT", ConnPolicy())
connect("safety_controller.cmd_htMotor_dq_OUTPORT",         "TorsoSim.head_tilt_motor_velocity_command_INPORT", ConnPolicy())

# status
connect("LWRrSim.JointPosition_OUTPORT",                    "safety_controller.status_rArm_q_INPORT", ConnPolicy())
connect("LWRrSim.JointVelocity_OUTPORT",                    "safety_controller.status_rArm_dq_INPORT", ConnPolicy())
connect("LWRrSim.JointTorque_OUTPORT",                      "safety_controller.status_rArm_t_INPORT", ConnPolicy())
connect("LWRrSim.GravityTorque_OUTPORT",                    "safety_controller.status_rArm_gt_INPORT", ConnPolicy())
connect("LWRrSim.CartesianWrench_OUTPORT",                  "safety_controller.status_rArm_w_INPORT", ConnPolicy())
connect("LWRrSim.MassMatrix_OUTPORT",                       "safety_controller.status_rArm_mmx_INPORT", ConnPolicy())
connect("LWRrSim.FRIState_OUTPORT",                         "safety_controller.status_rArm_friIntfState_INPORT", ConnPolicy())
connect("LWRrSim.RobotState_OUTPORT",                       "safety_controller.status_rArm_friRobotState_INPORT", ConnPolicy())
connect("RightHand.q_OUTPORT",                              "safety_controller.status_rHand_q_INPORT", ConnPolicy())
connect("RightHand.status_OUTPORT",                         "safety_controller.status_rHand_s_INPORT", ConnPolicy())

connect("LWRlSim.JointPosition_OUTPORT",                    "safety_controller.status_lArm_q_INPORT", ConnPolicy())
connect("LWRlSim.JointVelocity_OUTPORT",                    "safety_controller.status_lArm_dq_INPORT", ConnPolicy())
connect("LWRlSim.JointTorque_OUTPORT",                      "safety_controller.status_lArm_t_INPORT", ConnPolicy())
connect("LWRlSim.GravityTorque_OUTPORT",                    "safety_controller.status_lArm_gt_INPORT", ConnPolicy())
connect("LWRlSim.CartesianWrench_OUTPORT",                  "safety_controller.status_lArm_w_INPORT", ConnPolicy())
connect("LWRlSim.MassMatrix_OUTPORT",                       "safety_controller.status_lArm_mmx_INPORT", ConnPolicy())
connect("LWRlSim.FRIState_OUTPORT",                         "safety_controller.status_lArm_friIntfState_INPORT", ConnPolicy())
connect("LWRlSim.RobotState_OUTPORT",                       "safety_controller.status_lArm_friRobotState_INPORT", ConnPolicy())
connect("LeftHand.q_OUTPORT",                               "safety_controller.status_lHand_q_INPORT", ConnPolicy())
connect("LeftHand.status_OUTPORT",                          "safety_controller.status_lHand_s_INPORT", ConnPolicy())

connect("TorsoSim.t_MotorPosition_OUTPORT",                 "safety_controller.status_tMotor_q_INPORT", ConnPolicy())
connect("TorsoSim.t_MotorVelocity_OUTPORT",                 "safety_controller.status_tMotor_dq_INPORT", ConnPolicy())
connect("TorsoSim.head_pan_motor_position_OUTPORT",         "safety_controller.status_hpMotor_q_INPORT", ConnPolicy())
connect("TorsoSim.head_pan_motor_velocity_OUTPORT",         "safety_controller.status_hpMotor_dq_INPORT", ConnPolicy())
connect("TorsoSim.head_tilt_motor_position_OUTPORT",        "safety_controller.status_htMotor_q_INPORT", ConnPolicy())
connect("TorsoSim.head_tilt_motor_velocity_OUTPORT",        "safety_controller.status_htMotor_dq_INPORT", ConnPolicy())
connect("RightHandTactile.BHPressureState_OUTPORT",         "safety_controller.status_rHand_p_INPORT", ConnPolicy())
#connect("lli_lo_test.status_lHand_f_OUTPORT",             "safety_controller.status_lHand_f_INPORT", ConnPolicy())
# TODO LeftHandOptoforce.force_0_OUTPORT

connect("RightFtSensor.rawWrench_OUTPORT",                  "safety_controller.status_rFt_rw_INPORT", ConnPolicy())
connect("RightFtSensor.fastFilteredWrench_OUTPORT",         "safety_controller.status_rFt_ffw_INPORT", ConnPolicy())
connect("RightFtSensor.slowFilteredWrench_OUTPORT",         "safety_controller.status_rFt_sfw_INPORT", ConnPolicy())
connect("LeftFtSensor.rawWrench_OUTPORT",                   "safety_controller.status_lFt_rw_INPORT", ConnPolicy())
connect("LeftFtSensor.fastFilteredWrench_OUTPORT",          "safety_controller.status_lFt_ffw_INPORT", ConnPolicy())
connect("LeftFtSensor.slowFilteredWrench_OUTPORT",          "safety_controller.status_lFt_sfw_INPORT", ConnPolicy())

//------------------------------------------------------------------------------
//-- Controller manager
//------------------------------------------------------------------------------
loadComponent("scheme", "conman::Scheme");
setActivity("scheme", 0.001, 5, ORO_SCHED_RT);
scheme.loadService("conman_ros");
scheme.configure();

addPeer("scheme", "TorsoSim");
addPeer("scheme", "LWRrSim");
addPeer("scheme", "LWRlSim");
addPeer("scheme", "RightHandTactile");
addPeer("scheme", "RightHand");
addPeer("scheme", "LeftHand");
addPeer("scheme", "LeftHandOptoforce");
addPeer("scheme", "LeftFtSensor");
addPeer("scheme", "RightFtSensor");
addPeer("scheme", "lli_lo_rx");
addPeer("scheme", "lli_lo_tx");
addPeer("scheme", "safety_controller");

scheme.addBlock("lli_lo_rx");
scheme.addBlock("lli_lo_tx");
scheme.addBlock("safety_controller");
##scheme.latchConnections("lli_lo_tx", "safety_controller", true);
scheme.addBlock("TorsoSim");
scheme.addBlock("LWRrSim");
scheme.addBlock("LWRlSim");
scheme.addBlock("RightHandTactile");
scheme.addBlock("RightHand");
scheme.addBlock("LeftHand");
scheme.addBlock("LeftHandOptoforce");
scheme.addBlock("LeftFtSensor");
scheme.addBlock("RightFtSensor");


scheme.latchConnections("TorsoSim", "safety_controller", true);
scheme.latchConnections("LWRrSim", "safety_controller", true);
scheme.latchConnections("LWRlSim", "safety_controller", true);
scheme.latchConnections("RightHand", "safety_controller", true);
scheme.latchConnections("LeftHand", "safety_controller", true);
scheme.latchConnections("LeftHandOptoforce", "safety_controller", true);
scheme.latchConnections("LeftFtSensor", "safety_controller", true);
scheme.latchConnections("RightFtSensor", "safety_controller", true);
#scheme.latchOutputs("TorsoSim", true);
#scheme.latchOutputs("LWRrSim", true);
#scheme.latchOutputs("LWRlSim", true);
#scheme.latchOutputs("RightHandTactile", true);
#scheme.latchOutputs("RightHand", true);
#scheme.latchOutputs("LeftHand", true);
#scheme.latchOutputs("LeftHandOptoforce", true);
#scheme.latchOutputs("LeftFtSensor", true);
#scheme.latchOutputs("RightFtSensor", true);
scheme.latchConnections("RightHandTactile", "safety_controller", true);



lli_lo_tx.start();
lli_lo_rx.start();

safety_controller.start();

TorsoSim.start();
LWRrSim.start();
LWRlSim.start();
RightHandTactile.start();
RightHand.start();
LeftHand.start();
LeftHandOptoforce.start();
LeftFtSensor.start();
RightFtSensor.start();

scheme.start();

#break;  # the while loop
#}


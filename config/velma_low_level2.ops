import("rtt_ros");
import("rtt_roscomm");
import("rtt_rosparam");
require("os")

ros.import("rtt_rosclock");
ros.import("rtt_rospack")
ros.import("rtt_actionlib");
ros.import("rtt_barrett_hand_controller_msgs");
ros.import("rtt_geometry_msgs");
ros.import("rtt_velma_core_cs_ve_body_msgs");
ros.import("velma_core_cs_ve_body_msgs");
ros.import("velma_core_ve_body");

ros.import("eigen_typekit");
ros.import("rtt_std_msgs");
ros.import("port_operations");

ros.import("conman");
ros.import("conman_ros");

ros.import("rtt_control_msgs");
ros.import("lwr_fri");
ros.import("controller_common");
ros.import("velma_controller");
ros.import("rtt_cartesian_trajectory_msgs");
ros.import("rtt_std_msgs");
ros.import("rtt_tf");
ros.import("velma_sim_gazebo");

//------------------------------------------------------------------------------
//-- Simulation interface
//------------------------------------------------------------------------------

bool useSimulationTime()   { return true; }

TorsoSim.loadService("rosparam");
TorsoSim.rosparam.getAll();

if (!TorsoSim.configure()) then {
    kickOutAll();
}

#setActivityOnCPU("LWRrSim", 0.001, 6, ORO_SCHED_RT, 3)
setActivity("LWRrSim", 0.001, 6, ORO_SCHED_RT)
LWRrSim.loadService("sim_clock_activity")
LWRrSim.loadService("rosparam")
LWRrSim.rosparam.getAll()
LWRrSim.configure()

#setActivityOnCPU("LWRlSim", 0.001, 6, ORO_SCHED_RT, 3)
setActivity("LWRlSim", 0.001, 6, ORO_SCHED_RT)
LWRlSim.loadService("sim_clock_activity")
LWRlSim.loadService("rosparam")
LWRlSim.rosparam.getAll()
LWRlSim.configure()

#setActivityOnCPU("RightHandTactile", 0.025, 6, ORO_SCHED_RT, 3)
setActivity("RightHandTactile", 0, 6, ORO_SCHED_RT)
#RightHandTactile.loadService("sim_clock_activity")
RightHandTactile.loadService("rosparam")
RightHandTactile.rosparam.getAll()
RightHandTactile.configure()

#stream("RightHandTactile.BHPressureState_OUTPORT", ros.comm.topic("/right_hand/BHPressureState"))
#stream("RightHandTactile.calibrate_tactile_sensors_INPORT", ros.comm.topic("/right_hand/calibrate_tactile_sensors"))
#stream("RightHandTactile.set_median_filter_INPORT", ros.comm.topic("/right_hand/set_median_filter"))
#stream("RightHandTactile.tactile_info_OUTPORT", ros.comm.topic("/right_hand/tactile_info_out"))
//connect("RightHandTactile.max_measured_pressure_OUTPORT", "Hand.max_measured_pressure_in", ConnPolicy());

setActivity("LeftHandOptoforce", 0, 6, ORO_SCHED_RT)
LeftHandOptoforce.loadService("rosparam")
LeftHandOptoforce.rosparam.getAll()
LeftHandOptoforce.configure()

// TODO: uncomment
//stream("LeftHandOptoforce.force_0_OUTPORT", ros.comm.topic("/left_hand/optoforce/force_0"))
//stream("LeftHandOptoforce.force_1_OUTPORT", ros.comm.topic("/left_hand/optoforce/force_1"))
//stream("LeftHandOptoforce.force_2_OUTPORT", ros.comm.topic("/left_hand/optoforce/force_2"))

setActivity("RightHand", 0, 6, ORO_SCHED_RT)
RightHand.loadService("rosparam")
RightHand.rosparam.getAll()
RightHand.configure()

setActivity("LeftHand", 0, 6, ORO_SCHED_RT)
LeftHand.loadService("rosparam")
LeftHand.rosparam.getAll()
LeftHand.configure()

// F/T sensors

setActivity("LeftFtSensor", 0, 6, ORO_SCHED_RT)
LeftFtSensor.loadService("rosparam")
LeftFtSensor.rosparam.getAll()
LeftFtSensor.configure()
#stream("LeftFtSensor.rawWrench_OUTPORT", ros.comm.topic("/left_arm/ft_sensor/wrench"))

setActivity("RightFtSensor", 0, 6, ORO_SCHED_RT)
RightFtSensor.loadService("rosparam")
RightFtSensor.rosparam.getAll()
RightFtSensor.configure()
#stream("RightFtSensor.rawWrench_OUTPORT", ros.comm.topic("/right_arm/ft_sensor/wrench"))
#stream("RightFtSensor.fastFilteredWrench_OUTPORT", ros.comm.topic("/right_arm/ft_sensor/wrench_fast"))
#stream("RightFtSensor.slowFilteredWrench_OUTPORT", ros.comm.topic("/right_arm/ft_sensor/wrench_slow"))



loadComponent("bypass","VelmaLowIdleComponent")
setActivity("bypass", 0, 5, ORO_SCHED_RT);
bypass.configure()

loadComponent("safe","VelmaLowSafeComponent");
setActivity("safe", 0, 5, ORO_SCHED_RT);
safe.loadService("rosparam");
safe.rosparam.getAll();
safe.configure();





#
# the low level interfaces
#
loadComponent("lli_lo_tx","VelmaLLILoTx")
setActivity("lli_lo_tx", 0, 6, ORO_SCHED_RT);
lli_lo_tx.loadService("rosparam");
lli_lo_tx.rosparam.getAll();
lli_lo_tx.configure();

loadComponent("status_concate","VelmaLLIStatusConcate")
setActivity("status_concate", 0, 6, ORO_SCHED_RT);
status_concate.configure();
connect("status_concate.msg_OUTPORT", "lli_lo_tx.msg_INPORT", ConnPolicy())

loadComponent("lli_lo_rx","VelmaLLILoRx")
setActivity("lli_lo_rx", 0.001, 6, ORO_SCHED_RT);
lli_lo_rx.loadService("sim_clock_activity");
lli_lo_rx.loadService("rosparam");
lli_lo_rx.rosparam.getAll();

# command_split component is unnecessary in this case
#loadComponent("command_split","VelmaLLICommandSplit")
#setActivity("command_split", 0, 6, ORO_SCHED_RT);
#command_split.configure();
#connect("lli_lo_rx.msg_OUTPORT", "command_split.msg_INPORT", ConnPolicy())

#
# command
#
connect("safe.cmd_rArm_t_OUTPORT",         "LWRrSim.JointTorqueCommand_INPORT", ConnPolicy())
#connect("safe.cmd_rArm_cmd_OUTPORT",       "LWRrSim.KRL_CMD_INPORT", ConnPolicy())

connect("safe.cmd_lArm_t_OUTPORT",         "LWRlSim.JointTorqueCommand_INPORT", ConnPolicy())
#connect("safe.cmd_lArm_cmd_OUTPORT",       "LWRlSim.KRL_CMD_INPORT", ConnPolicy())

connect("safe.cmd_tMotor_i_OUTPORT",           "TorsoSim.t_MotorCurrentCommand_INPORT", ConnPolicy())
connect("safe.cmd_hpMotor_i_OUTPORT",          "TorsoSim.head_pan_motor_current_command_INPORT", ConnPolicy())
connect("safe.cmd_htMotor_i_OUTPORT",          "TorsoSim.head_tilt_motor_current_command_INPORT", ConnPolicy())
connect("safe.cmd_hpMotor_q_OUTPORT",          "TorsoSim.head_pan_motor_position_command_INPORT", ConnPolicy())
connect("safe.cmd_htMotor_q_OUTPORT",          "TorsoSim.head_tilt_motor_position_command_INPORT", ConnPolicy())
connect("safe.cmd_hpMotor_dq_OUTPORT",         "TorsoSim.head_pan_motor_velocity_command_INPORT", ConnPolicy())
connect("safe.cmd_htMotor_dq_OUTPORT",         "TorsoSim.head_tilt_motor_velocity_command_INPORT", ConnPolicy())

#
# status for safety_controller
#
connect("LWRrSim.JointPosition_OUTPORT",                    "safe.status_rArm_q_INPORT", ConnPolicy())
connect("LWRrSim.JointVelocity_OUTPORT",                    "safe.status_rArm_dq_INPORT", ConnPolicy())
connect("LWRrSim.JointTorque_OUTPORT",                      "safe.status_rArm_t_INPORT", ConnPolicy())
connect("LWRrSim.GravityTorque_OUTPORT",                    "safe.status_rArm_gt_INPORT", ConnPolicy())
connect("LWRrSim.CartesianWrench_OUTPORT",                  "safe.status_rArm_w_INPORT", ConnPolicy())
connect("LWRrSim.MassMatrix_OUTPORT",                       "safe.status_rArm_mmx_INPORT", ConnPolicy())
#connect("LWRrSim.FRIState_OUTPORT",                         "safe.status_rArm_friIntfState_INPORT", ConnPolicy())
#connect("LWRrSim.RobotState_OUTPORT",                       "safe.status_rArm_friRobotState_INPORT", ConnPolicy())

connect("LWRlSim.JointPosition_OUTPORT",                    "safe.status_lArm_q_INPORT", ConnPolicy())
connect("LWRlSim.JointVelocity_OUTPORT",                    "safe.status_lArm_dq_INPORT", ConnPolicy())
connect("LWRlSim.JointTorque_OUTPORT",                      "safe.status_lArm_t_INPORT", ConnPolicy())
connect("LWRlSim.GravityTorque_OUTPORT",                    "safe.status_lArm_gt_INPORT", ConnPolicy())
connect("LWRlSim.CartesianWrench_OUTPORT",                  "safe.status_lArm_w_INPORT", ConnPolicy())
connect("LWRlSim.MassMatrix_OUTPORT",                       "safe.status_lArm_mmx_INPORT", ConnPolicy())
#connect("LWRlSim.FRIState_OUTPORT",                         "safe.status_lArm_friIntfState_INPORT", ConnPolicy())
#connect("LWRlSim.RobotState_OUTPORT",                       "safe.status_lArm_friRobotState_INPORT", ConnPolicy())

connect("TorsoSim.t_MotorPosition_OUTPORT",                 "safe.status_tMotor_q_INPORT", ConnPolicy())
connect("TorsoSim.t_MotorVelocity_OUTPORT",                 "safe.status_tMotor_dq_INPORT", ConnPolicy())
connect("TorsoSim.head_pan_motor_position_OUTPORT",         "safe.status_hpMotor_q_INPORT", ConnPolicy())
connect("TorsoSim.head_pan_motor_velocity_OUTPORT",         "safe.status_hpMotor_dq_INPORT", ConnPolicy())
connect("TorsoSim.head_tilt_motor_position_OUTPORT",        "safe.status_htMotor_q_INPORT", ConnPolicy())
connect("TorsoSim.head_tilt_motor_velocity_OUTPORT",        "safe.status_htMotor_dq_INPORT", ConnPolicy())

#
# status for lli_lo_tx
#
connect("LWRrSim.JointPosition_OUTPORT",                    "status_concate.status_rArm_q_INPORT", ConnPolicy())
connect("LWRrSim.JointVelocity_OUTPORT",                    "status_concate.status_rArm_dq_INPORT", ConnPolicy())
connect("LWRrSim.JointTorque_OUTPORT",                      "status_concate.status_rArm_t_INPORT", ConnPolicy())
connect("LWRrSim.GravityTorque_OUTPORT",                    "status_concate.status_rArm_gt_INPORT", ConnPolicy())
connect("LWRrSim.CartesianWrench_OUTPORT",                  "status_concate.status_rArm_w_INPORT", ConnPolicy())
connect("LWRrSim.MassMatrix_OUTPORT",                       "status_concate.status_rArm_mmx_INPORT", ConnPolicy())
connect("RightHand.q_OUTPORT",                              "status_concate.status_rHand_q_INPORT", ConnPolicy())
connect("RightHand.status_OUTPORT",                         "status_concate.status_rHand_s_INPORT", ConnPolicy())

connect("LWRlSim.JointPosition_OUTPORT",                    "status_concate.status_lArm_q_INPORT", ConnPolicy())
connect("LWRlSim.JointVelocity_OUTPORT",                    "status_concate.status_lArm_dq_INPORT", ConnPolicy())
connect("LWRlSim.JointTorque_OUTPORT",                      "status_concate.status_lArm_t_INPORT", ConnPolicy())
connect("LWRlSim.GravityTorque_OUTPORT",                    "status_concate.status_lArm_gt_INPORT", ConnPolicy())
connect("LWRlSim.CartesianWrench_OUTPORT",                  "status_concate.status_lArm_w_INPORT", ConnPolicy())
connect("LWRlSim.MassMatrix_OUTPORT",                       "status_concate.status_lArm_mmx_INPORT", ConnPolicy())
connect("LeftHand.q_OUTPORT",                               "status_concate.status_lHand_q_INPORT", ConnPolicy())
connect("LeftHand.status_OUTPORT",                          "status_concate.status_lHand_s_INPORT", ConnPolicy())

connect("TorsoSim.t_MotorPosition_OUTPORT",                 "status_concate.status_tMotor_q_INPORT", ConnPolicy())
connect("TorsoSim.t_MotorVelocity_OUTPORT",                 "status_concate.status_tMotor_dq_INPORT", ConnPolicy())
connect("TorsoSim.head_pan_motor_position_OUTPORT",         "status_concate.status_hpMotor_q_INPORT", ConnPolicy())
connect("TorsoSim.head_pan_motor_velocity_OUTPORT",         "status_concate.status_hpMotor_dq_INPORT", ConnPolicy())
connect("TorsoSim.head_tilt_motor_position_OUTPORT",        "status_concate.status_htMotor_q_INPORT", ConnPolicy())
connect("TorsoSim.head_tilt_motor_velocity_OUTPORT",        "status_concate.status_htMotor_dq_INPORT", ConnPolicy())
connect("RightHandTactile.BHPressureState_OUTPORT",         "status_concate.status_rHand_p_INPORT", ConnPolicy())
#connect("lli_lo_test.status_lHand_f_OUTPORT",             "status_concate.status_lHand_f_INPORT", ConnPolicy())
# TODO LeftHandOptoforce.force_0_OUTPORT

connect("RightFtSensor.rawWrench_OUTPORT",                  "status_concate.status_rFt_rw_INPORT", ConnPolicy())
connect("RightFtSensor.fastFilteredWrench_OUTPORT",         "status_concate.status_rFt_ffw_INPORT", ConnPolicy())
connect("RightFtSensor.slowFilteredWrench_OUTPORT",         "status_concate.status_rFt_sfw_INPORT", ConnPolicy())
connect("LeftFtSensor.rawWrench_OUTPORT",                   "status_concate.status_lFt_rw_INPORT", ConnPolicy())
connect("LeftFtSensor.fastFilteredWrench_OUTPORT",          "status_concate.status_lFt_ffw_INPORT", ConnPolicy())
connect("LeftFtSensor.slowFilteredWrench_OUTPORT",          "status_concate.status_lFt_sfw_INPORT", ConnPolicy())


connect("lli_lo_rx.msg_OUTPORT", "bypass.command_INPORT", ConnPolicy())

#
# controller manager: scheme
#
loadComponent("scheme", "conman::Scheme");
scheme.loadService("conman_ros");
scheme.configure();

addPeer("scheme", "TorsoSim");
addPeer("scheme", "RightHandTactile");
addPeer("scheme", "RightHand");
addPeer("scheme", "LeftHand");
addPeer("scheme", "LeftHandOptoforce");
addPeer("scheme", "LeftFtSensor");
addPeer("scheme", "RightFtSensor");
addPeer("scheme", "LWRrSim");
addPeer("scheme", "LWRlSim");
addPeer("scheme", "lli_lo_tx");
addPeer("scheme", "status_concate");
addPeer("scheme", "bypass");
addPeer("scheme", "safe");

scheme.addBlock("TorsoSim");
scheme.addBlock("RightHandTactile");
scheme.addBlock("RightHand");
scheme.addBlock("LeftHand");
scheme.addBlock("LeftHandOptoforce");
scheme.addBlock("LeftFtSensor");
scheme.addBlock("RightFtSensor");
scheme.addBlock("LWRrSim");
scheme.addBlock("LWRlSim");
scheme.addBlock("lli_lo_tx");
scheme.addBlock("status_concate");
scheme.addBlock("bypass");
scheme.addBlock("safe");

scheme.latchConnections("LWRrSim", "safe", true);
scheme.latchConnections("LWRlSim", "safe", true);
scheme.latchConnections("TorsoSim", "safe", true);

#
# master component
#
loadComponent("master_component","VelmaLowLevelMaster");
setActivity("master_component", 0, 6, ORO_SCHED_RT);
addPeer("master_component", "scheme");
connect("lli_lo_rx.msg_OUTPORT", "master_component.command_INPORT", ConnPolicy())
master_component.loadService("rosparam")
master_component.rosparam.getAll()
master_component.configure();

connect("master_component.status_test_OUTPORT",    "status_concate.status_test_INPORT", ConnPolicy())

#
# receiver
#
var bool triggerOnStart = false
set master_component.TriggerOnStart = triggerOnStart
set TorsoSim.TriggerOnStart = triggerOnStart
set lli_lo_rx.TriggerOnStart = triggerOnStart
set RightHandTactile.TriggerOnStart = triggerOnStart
set RightHand.TriggerOnStart = triggerOnStart
set LeftHand.TriggerOnStart = triggerOnStart
set LeftHandOptoforce.TriggerOnStart = triggerOnStart
set LeftFtSensor.TriggerOnStart = triggerOnStart
set RightFtSensor.TriggerOnStart = triggerOnStart
set LWRrSim.TriggerOnStart = triggerOnStart
set LWRlSim.TriggerOnStart = triggerOnStart
set lli_lo_tx.TriggerOnStart = triggerOnStart
set status_concate.TriggerOnStart = triggerOnStart
set scheme.TriggerOnStart = triggerOnStart
set safe.TriggerOnStart = triggerOnStart
set bypass.TriggerOnStart = triggerOnStart

# add slave tasks to lli_lo_rx
addPeer("lli_lo_rx", "master_component");
addPeer("lli_lo_rx", "scheme");

# set slave tasks execution order (before configure)
lli_lo_rx.pushBackPeerExecution("master_component");
lli_lo_rx.pushBackPeerExecution("scheme");

lli_lo_rx.configure();


#
# diagnostics component
#
loadComponent("diag","DiagnosticComponent");
setActivity("diag", 0.01, 0, ORO_SCHED_OTHER);
diag.loadService("sim_clock_activity");

addPeer("diag", "lli_lo_rx");
addPeer("diag", "lli_lo_tx");
addPeer("diag", "status_concate");
addPeer("diag", "master_component");
addPeer("diag", "TorsoSim");
addPeer("diag", "RightHandTactile");
addPeer("diag", "RightHand");
addPeer("diag", "LeftHand");
addPeer("diag", "LeftHandOptoforce");
addPeer("diag", "LeftFtSensor");
addPeer("diag", "RightFtSensor");
addPeer("diag", "LWRrSim");
addPeer("diag", "LWRlSim");
addPeer("diag", "safe");
addPeer("diag", "bypass");

#connect("safety_controller.status_sc_OUTPORT",      "diag.status_sc_INPORT", ConnPolicy())
stream("diag.diag_OUTPORT", ros.comm.topic("/velma_low_level/diag"))

diag.configure();


#
# start components
#
status_concate.start();
lli_lo_tx.start();

scheme.start();
master_component.start();

TorsoSim.start();
LWRrSim.start();
LWRlSim.start();
RightHandTactile.start();
RightHand.start();
LeftHand.start();
LeftHandOptoforce.start();
LeftFtSensor.start();
RightFtSensor.start();

lli_lo_rx.start();

diag.start();

#break;  # the while loop
#}


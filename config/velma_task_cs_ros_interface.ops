import("rtt_ros");
import("rtt_roscomm");
import("rtt_rosparam");
require("os")

ros.import("rtt_rospack")
ros.import("rtt_actionlib");
ros.import("rtt_barrett_hand_controller_msgs");
ros.import("barrett_hand_move_action");

ros.import("eigen_typekit");
ros.import("rtt_control_msgs");
ros.import("rtt_rosclock");
ros.import("controller_common");
ros.import("velma_controller");
ros.import("rtt_cartesian_trajectory_msgs");
ros.import("rtt_std_msgs");
ros.import("rtt_tf");
ros.import("port_operations")
ros.import("force_control");
ros.import("rtt_force_control_msgs");

ros.import("rtt_velma_core_cs_task_cs_msgs");

## load cartesian trajectory action
loadComponent("CartTrjActionRight", "CartesianTrajectoryActionNew");
setActivityOnCPU("CartTrjActionRight", 0.01, 1, ORO_SCHED_RT, 0);

#connect("status_split.status_rArm_w_OUTPORT",  "CartTrjActionRight.CartesianWrench_INPORT", ConnPolicy());

//------------------------------------------------------------------------------
//-- ROS Command interface
//------------------------------------------------------------------------------

#connect("CartTrjActionRight.CartesianTrajectoryCommand_OUTPORT", "PoseIntRight.CartesianTrajectoryCommand_INPORT", ConnPolicy());
#connect("CartTrjActionRight.CartesianPositionCommand_INPORT", "PoseIntRight.CartesianPositionCommand_OUTPORT", ConnPolicy());
#connect("FK.RightPosition_OUTPORT", "CartTrjActionRight.CartesianPosition_INPORT", ConnPolicy())

#stream("CartTrjActionRight.trajectory", ros.comm.topic("/right_arm/trajectory"));

CartTrjActionRight.configure();
CartTrjActionRight.loadService("actionlib")
CartTrjActionRight.actionlib.connect("/right_arm/cartesian_trajectory")

connect("CartTrjActionRight.cart_pose_command_OUTPORT", "VelmaCoreCsTaskCsCommandConcate.cart_pose_INPORT", ConnPolicy())


CartTrjActionRight.start();

#loadComponent("VelmaCoreCsTaskCsCommandConcate", "VelmaCoreCsTaskCsCommandConcate");
#VelmaCoreCsTaskCsCommandConcate

#loadComponent("VelmaCoreCsTaskCsCommandTx", "VelmaCoreCsTaskCsCommandTx");


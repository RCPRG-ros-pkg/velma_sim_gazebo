<subsystem>
    <import>rtt_barrett_hand_controller_msgs</import>
    <import>eigen_typekit</import>
    <import>rtt_control_msgs</import>
    <import>controller_common</import>
    <import>velma_controller</import>
    <import>rtt_cartesian_trajectory_msgs</import>
    <import>rtt_std_msgs</import>
    <import>rtt_tf</import>
    <import>port_operations</import>
    <import>force_control</import>
    <import>rtt_force_control_msgs</import>
    <import>velma_core_cs</import>
    <import>rtt_velma_core_cs_ve_body_msgs</import>
    <import>rtt_velma_core_cs_ve_body_subsystem_ports</import>
    <import>rtt_velma_core_cs_task_cs_msgs</import>
    <import>rtt_velma_core_cs_task_cs_subsystem_ports</import>

    <component name="ColDet"     type="CollisionDetectorVelma" latex="\text{ColDet}" />

    <component name="VL_hp"     type="VelocityLimiter" latex="\text{VelLim}_{hp}" />
    <component name="VL_ht"     type="VelocityLimiter" latex="\text{VelLim}_{ht}" />

    <component name="C_q_body"  type="VectorConcate1_7_7_0" latex="\text{Conc}_{q,b}" />
    <component name="C_dq_body" type="VectorConcate1_7_7_0" latex="\text{Conc}_{\dot{q},b}" />
    <component name="C_q_all"   type="VectorConcate15_2_8_8" latex="\text{Conc}_{q}" />
    <component name="C_dq_all"  type="VectorConcate15_2_8_8" latex="\text{Conc}_{\dot{q}}" />
    <component name="Mass"      type="MassTest15_2" latex="\text{Mass}" >
        <service>robot</service>
    </component>

    <component name="JTG_head"  type="InternalSpaceSplineTrajectoryGeneratorVelmaHead" latex="\text{JntTrGen}_{head}" />

    <component name="C_q_head"  type="VectorConcate1_1_0_0" latex="\text{Conc}_{q,head}" />
    <component name="S_q_head"  type="PortDoubleSplit2" latex="\text{Split}_{q,head}" />

<!--
#    <component name="TorquePubRight"   type="TorquePublisher7" />
#    <component name="TorquePubLeft"    type="TorquePublisher7" />
#    <component name="VG"       type="VelmaGrav" />
#TGR.start();
-->
<!--    <component name="TGR"       type="TriggerGenerator" />-->
    <component name="ZeroVec8"  type="VectorDummy8" latex="\text{ZeroVec}_{8}" />
    <component name="S_t_body"        type="VectorSplit1_7_7_0" latex="\text{Split}_{t,b}" />
<!--    <component name="TJ"        type="TorsoTeleopJoy" running="true" />-->

    <component name="C_dq_head" type="VectorConcate1_1_0_0" latex="\text{Conc}_{\dot{q},head}" />

    <component name="CImp"                  type="CartesianImpedance15_2" latex="\text{IMP}_{cart}" >
        <service>robot</service>
    </component>

    <component name="INT_pose_r"    type="CartesianInterpolatorVelma" latex="\text{INT}_{r,pos}" />
    <component name="INT_pose_l"    type="CartesianInterpolatorVelma" latex="\text{INT}_{l,pos}" />
    <component name="INT_tool_r"    type="CartesianInterpolatorVelma" latex="\text{INT}_{r,tool}" />
    <component name="INT_tool_l"    type="CartesianInterpolatorVelma" latex="\text{INT}_{l,tool}" />
    <component name="INT_imp_r"     type="CartesianImpedanceInterpolatorVelma" latex="\text{INT}_{r,imp}" />
    <component name="INT_imp_l"     type="CartesianImpedanceInterpolatorVelma" latex="\text{INT}_{l,imp}" />
    <component name="JntImp"        type="JointImpedance15" latex="\text{IMP}_{jnt}" />
    <component name="FK"            type="VelmaFK" latex="\text{FK}" >
        <service>robot</service>
    </component>
<!--    <component name="RightForceTransformation"  type="ForceTransformation" />
    <component name="LeftForceTransformation"   type="ForceTransformation" />
    <component name="RightForceControl"         type="ForceControlLaw" />
    <component name="LeftForceControl"          type="ForceControlLaw" />
-->
    <component name="JTG_body"  type="InternalSpaceSplineTrajectoryGeneratorVelmaBody" latex="\text{JntTrGen}_{b}" />
    <component name="JntLimit"                  type="JointLimitAvoidance15" latex="\text{JntLim}" />

    <component name="idle"          type="velma_core_cs_types::IdleComponent" latex="\text{IDLE}" />
    <component name="safe"          type="velma_core_cs_types::SafeComponent" latex="\text{SAFE}" />
    <component name="cart_imp"      type="velma_core_cs_types::CartImpComponent" latex="\text{CIMP}" />
    <component name="jnt_imp"       type="velma_core_cs_types::JntImpComponent" latex="\text{JIMP}" />
<!--    <component name="fcl"           type="velma_core_cs_types::FclComponent" />-->

    <component name="wcc_r"           type="DoubleJointConstraint15" latex="\text{WCC}_{r}" />
    <component name="wcc_l"           type="DoubleJointConstraint15" latex="\text{WCC}_{l}" />

    <component name="b_stSplit"     latex="\text{Split}_{b,st}" />
    <component name="cmdSplit"      latex="\text{Split}_{task,cmd}" />
    <component name="stConcate"     latex="\text{Conc}_{task,st}" />
    <component name="b_cmdConcate"  latex="\text{Conc}_{b,cmd}" />

<!--    <component name="b_stRx"        latex="\text{x}_{b,st}" />
    <component name="cmdRx"         latex="\text{x}_{task,cmd}" />
    <component name="stTx"          latex="\text{y}_{task,st}" />
    <component name="b_cmdTx"       latex="\text{y}_{b,cmd}" />
    <component name="master_component"      latex="\text{MC}" />
-->
    <io_buffer alias="b_st"     name="velma_core_cs_ve_body_msgs_Status" />
    <io_buffer alias="b_cmd"    name="velma_core_cs_ve_body_msgs_Command" />

    <io_buffer alias="st" name="velma_core_cs_task_cs_msgs_Status" />
    <io_buffer alias="cmd" name="velma_core_cs_task_cs_msgs_Command" />

    <connection from="C_q_all.Out" to="ColDet.q_INPORT" name="q" latex="q" />


    <connection from="CImp.JointTorqueCommand_OUTPORT" to="wcc_r.NullSpaceTorqueCommand_INPORT" name="cmd_t_body" latex="t_{cmd,b}" />
    <connection from="C_q_body.Out" to="wcc_r.JointPosition_INPORT" name="q_body" latex="q_{b}" />
    <connection from="C_dq_body.Out" to="wcc_r.JointVelocity_INPORT" name="dq_body" latex="\dot{q}_{b}" />
    <connection from="Mass.MassMatrix_OUTPORT" to="wcc_r.MassMatrixInv_INPORT" name="M" latex="M" />

    <connection from="wcc_r.JointTorqueCommand_OUTPORT" to="wcc_l.NullSpaceTorqueCommand_INPORT" name="cmd_t_body" latex="t_{cmd,b}" />
    <connection from="C_q_body.Out" to="wcc_l.JointPosition_INPORT" name="q_body" latex="q_{b}" />
    <connection from="C_dq_body.Out" to="wcc_l.JointVelocity_INPORT" name="dq_body" latex="\dot{q}_{b}" />
    <connection from="Mass.MassMatrix_OUTPORT" to="wcc_l.MassMatrixInv_INPORT" name="M" latex="M" />
    <connection from="wcc_l.JointTorqueCommand_OUTPORT" to="S_t_body.In" name="cmd_t_body" latex="t_{cmd,b}" />

    <connection from="INT_tool_r.CartesianPositionCommand_OUTPORT"    to="stConcate.rToolInWristPose_INPORT" name="cmd_tool_r" latex="p_{r,tool}" />
    <connection from="INT_tool_l.CartesianPositionCommand_OUTPORT"     to="stConcate.lToolInWristPose_INPORT" name="cmd_tool_l" latex="p_{l,tool}" />

    <connection from="idle.subsystem_state_OUTPORT"     to="stConcate.subsystem_state_INPORT" name="st_id" latex="st" />
    <connection from="safe.subsystem_state_OUTPORT"     to="stConcate.subsystem_state_INPORT" name="st_id" latex="st" />
    <connection from="cart_imp.subsystem_state_OUTPORT" to="stConcate.subsystem_state_INPORT" name="st_id" latex="st" />
    <connection from="jnt_imp.subsystem_state_OUTPORT"  to="stConcate.subsystem_state_INPORT" name="st_id" latex="st" />

    <connection from="b_stSplit.tMotor_q_OUTPORT" to="C_q_body.In0" name="q_t" latex="q_t" />

<!--    <connection from="b_stSplit.tMotor_q_OUTPORT" to="TorsoPosConcate.InputPort_0" />-->
<!--    <connection from="b_stSplit.tMotor_dq_OUTPORT" to="TorsoVelConcate.InputPort_0" />-->
<!--    <connection from="TorsoTrqSplit.OutputPort_0" to="b_cmdConcate.tMotor_i_INPORT" />-->

    <connection from="b_stSplit.hpMotor_q_OUTPORT" to="C_q_head.In0" name="q_hp" latex="q_{hp}" />
    <connection from="b_stSplit.hpMotor_dq_OUTPORT" to="C_dq_head.In0" name="dq_hp" latex="\dot{q}_{hp}" />

<!--    <connection from="Vd2.vector_OUTPORT" to="S_q_head.InputPort" />-->

<!--    <connection from="S_q_head.OutputPort_0" to="b_cmdConcate.hpMotor_dq_INPORT" /> TODO: check if dq is used-->
    <connection from="S_q_head.OutputPort_0" to="VL_hp.Position_INPORT" name="q_hp" latex="q_{hp}" />


    <connection from="b_stSplit.htMotor_q_OUTPORT" to="VL_ht.PositionMsr_INPORT" name="q_ht" latex="q_{ht}" />

    <connection from="b_stSplit.htMotor_q_OUTPORT" to="C_q_head.In1" name="q_ht" latex="q_{ht}" />
    <connection from="b_stSplit.htMotor_dq_OUTPORT" to="C_dq_head.In1" name="dq_ht" latex="\dot{q}_{ht}" />
    <connection from="S_q_head.OutputPort_1" to="VL_ht.Position_INPORT" name="q_ht" latex="q_{ht}" />
<!--    <connection from="S_q_head.OutputPort_1" to="b_cmdConcate.htMotor_dq_INPORT" /> TODO: check if dq is used-->

    <connection from="b_stSplit.hpMotor_q_OUTPORT" to="VL_hp.PositionMsr_INPORT" name="q_hp" latex="q_{hp}" />
    <connection from="VL_hp.Position_OUTPORT" to="b_cmdConcate.hpMotor_q_INPORT" name="cmd_q_hp" latex="q_{hp,cmd}" />
    <connection from="VL_ht.Position_OUTPORT" to="b_cmdConcate.htMotor_q_INPORT" name="cmd_q_ht" latex="q_{ht,cmd}" />

    <connection from="b_stSplit.rArm_q_OUTPORT" to="C_q_body.In1" latex="q_{ra}" />
    <connection from="b_stSplit.lArm_q_OUTPORT" to="C_q_body.In2" latex="q_{la}" />
    <connection from="b_stSplit.rArm_dq_OUTPORT" to="C_dq_body.In1" latex="\dot{q}_{ra}" />
    <connection from="b_stSplit.lArm_dq_OUTPORT" to="C_dq_body.In2" latex="\dot{q}_{la}" />
    <connection from="b_stSplit.rHand_q_OUTPORT" to="C_q_all.In2" latex="q_{rh}" />
    <connection from="b_stSplit.lHand_q_OUTPORT" to="C_q_all.In3" latex="q_{lh}" />
    <connection from="ZeroVec8.vector_OUTPORT" to="C_dq_all.In2" name="0" />
    <connection from="ZeroVec8.vector_OUTPORT" to="C_dq_all.In3" name="0" />
    <connection from="S_t_body.Out1" to="b_cmdConcate.rArm_t_INPORT" name="t_ra" latex="t_{ra,cmd}" />
    <connection from="S_t_body.Out2" to="b_cmdConcate.lArm_t_INPORT" name="t_la" latex="t_{la,cmd}" />
    <connection from="b_stSplit.lArm_mmx_OUTPORT"  to="Mass.MassMatrixLeft_INPORT" latex="M_{la}" />
    <connection from="b_stSplit.rArm_mmx_OUTPORT"  to="Mass.MassMatrixRight_INPORT" latex="M_{ra}" />
    <connection from="C_q_body.Out" to="Mass.JointPosition_INPORT"  name="q_body" latex="q_{body}" />

    <connection from="C_q_head.Out" to="C_q_all.In1" name="q_head" latex="q_{head}" />
    <connection from="C_dq_head.Out" to="C_dq_all.In1" name="dq_head" latex="q_{head}" />

<!--    <connection from="Vd2.vector_OUTPORT" to="C_q_all.In1" />
    <connection from="Vd2.vector_OUTPORT" to="C_dq_all.In1" />-->
<!--    <connection from="TorsoPosConcate.OutputPort" to="C_q_body.In0" />-->

    <connection from="b_stSplit.tMotor_dq_OUTPORT" to="C_dq_body.In0" name="dq_t" latex="\dot{q}_{t}" />

<!--    <connection from="TorsoVelConcate.OutputPort" to="C_dq_body.In0" />-->
    <connection from="C_q_body.Out" to="C_q_all.In0" name="q_body" latex="q_{b}" />
    <connection from="C_dq_body.Out" to="C_dq_all.In0" name="dq_body" latex="\dot{q}_{b}" />
<!--    <connection from="S_t_body.Out0" to="TorsoTrqSplit.InputPort" name="t_t" />-->
    <connection from="S_t_body.Out0" to="b_cmdConcate.tMotor_i_INPORT" name="t_t" latex="t_{t}" />
<!--    <connection from="S_t_body.Out0" to="conv9.sc_INPORT" name="t_t" />
    <connection from="conv9.sc_OUTPORT" to="b_cmdConcate.tMotor_i_INPORT" name="t_t" />-->

    <connection from="C_q_body.Out" to="CImp.JointPosition_INPORT" name="q_body" latex="q_{b}" />
    <connection from="C_dq_body.Out" to="CImp.JointVelocity_INPORT" name="dq_body" latex="\dot{q}_{b}" />
    <connection from="Mass.MassMatrix_OUTPORT" to="CImp.MassMatrixInv_INPORT" name="M" latex="M" />
<!--    <connection from="CImp.JointTorqueCommand_OUTPORT" to="S_t_body.In" />-->
    <connection from="INT_pose_r.CartesianPositionCommand_OUTPORT" to="CImp.CartPositionCommand0_INPORT" name="cmd_pos_r" latex="p_{r,pos}" />
    <connection from="cmdSplit.cart_r_pose_OUTPORT" to="INT_pose_r.CartesianTrajectoryCommand_INPORT" latex="tr_{r,pos}" />
    <connection from="INT_pose_r.generator_status_OUTPORT" to="stConcate.rCart_status_INPORT" name="gen_st" latex="s_{gen}" />
    <connection from="INT_pose_r.CartesianPositionCommand_OUTPORT" to="stConcate.rCart_cmd_INPORT" name="cmd_pos_r" latex="p_{r,pos}" />
    <connection from="INT_pose_l.CartesianPositionCommand_OUTPORT" to="CImp.CartPositionCommand1_INPORT" name="cmd_pos_l" latex="p_{l,pos}" />
    <connection from="cmdSplit.cart_l_pose_OUTPORT" to="INT_pose_l.CartesianTrajectoryCommand_INPORT" latex="tr_{l,pos}" />
    <connection from="INT_pose_l.generator_status_OUTPORT" to="stConcate.lCart_status_INPORT" name="gen_st" latex="s_{gen}" />
    <connection from="INT_pose_l.CartesianPositionCommand_OUTPORT" to="stConcate.lCart_cmd_INPORT" name="cmd_pos_l" latex="p_{l,pos}" />
    <connection from="INT_tool_r.CartesianPositionCommand_OUTPORT" to="CImp.ToolPositionCommand0_INPORT" name="cmd_tool_r" latex="p_{r,tool}" />
    <connection from="cmdSplit.cart_r_tool_OUTPORT" to="INT_tool_r.CartesianTrajectoryCommand_INPORT" latex="tr_{r,tool}" />
    <connection from="INT_tool_l.CartesianPositionCommand_OUTPORT" to="CImp.ToolPositionCommand1_INPORT" name="cmd_tool_l" latex="p_{l,tool}" />
    <connection from="cmdSplit.cart_l_tool_OUTPORT" to="INT_tool_l.CartesianTrajectoryCommand_INPORT" latex="tr_{l,tool}" />
    <connection from="INT_imp_r.CartesianImpedanceCommand_OUTPORT" to="CImp.CartImpedanceCommand0_INPORT" name="cmd_imp_r" latex="p_{r,imp}" />
    <connection from="cmdSplit.cart_r_imp_OUTPORT" to="INT_imp_r.CartesianImpedanceTrajectoryCommand_INPORT" latex="tr_{r,imp}" />
    <connection from="INT_imp_l.CartesianImpedanceCommand_OUTPORT" to="CImp.CartImpedanceCommand1_INPORT" name="cmd_imp_l" latex="p_{l,imp}" />
    <connection from="cmdSplit.cart_l_imp_OUTPORT" to="INT_imp_l.CartesianImpedanceTrajectoryCommand_INPORT" latex="tr_{l,imp}" />
    <connection from="C_q_body.Out" to="JntImp.JointPosition_INPORT" name="q_body" latex="q_{b}" />
    <connection from="C_dq_body.Out" to="JntImp.JointVelocity_INPORT" name="dq_body" latex="\dot{q}_{b}" />
    <connection from="Mass.MassMatrix_OUTPORT" to="JntImp.MassMatrix_INPORT" name="M" latex="M" />
    <connection from="JntImp.JointTorqueCommand_OUTPORT" to="S_t_body.In" name="cmd_t_body" latex="t_{b,cmd}" />
    <connection from="INT_tool_l.CartesianPositionCommand_OUTPORT" to="FK.LeftTool_INPORT" name="cmd_tool_l" latex="p_{l,tool}" />
    <connection from="INT_tool_r.CartesianPositionCommand_OUTPORT" to="FK.RightTool_INPORT" name="cmd_tool_r" latex="p_{r,tool}" />
    <connection from="C_q_body.Out" to="FK.JointPosition_INPORT" name="q_body" latex="q_{b}" />
    <connection from="FK.LeftPosition_OUTPORT" to="INT_pose_l.CartesianPosition_INPORT" latex="p_{l}" />
    <connection from="FK.RightPosition_OUTPORT" to="INT_pose_r.CartesianPosition_INPORT" latex="p_{r}" />

<!--
    <connection from="fcl.subsystem_state_OUTPORT"      to="stConcate.subsystem_state_INPORT" />
    <connection from="FK.RightWrist_OUTPORT" to="RightForceTransformation.CurrentWristPose" />
    <connection from="b_stSplit.rFt_sfw_OUTPORT" to="RightForceTransformation.CurrentSensorSlowFilteredWrench" />
    <connection from="b_stSplit.rFt_rw_OUTPORT" to="RightForceTransformation.CurrentSensorFastFilteredWrench" />
    <connection from="INT_tool_r.CartesianPositionCommand_OUTPORT" to="RightForceTransformation.Tool" />
    <connection from="FK.LeftWrist_OUTPORT" to="LeftForceTransformation.CurrentWristPose" />
    <connection from="b_stSplit.lFt_sfw_OUTPORT" to="LeftForceTransformation.CurrentSensorSlowFilteredWrench" />
    <connection from="b_stSplit.lFt_rw_OUTPORT" to="LeftForceTransformation.CurrentSensorFastFilteredWrench" />
    <connection from="INT_tool_l.CartesianPositionCommand_OUTPORT" to="LeftForceTransformation.Tool" />
    <connection from="RightForceControl.OutputEndEffectorPose" to="CImp.CartPositionCommand0_INPORT" />
    <connection from="FK.RightPosition_OUTPORT" to="RightForceControl.CurrentEndEffectorPose" />
    <connection from="RightForceTransformation.OutputEndEffectorWrench" to="RightForceControl.CurrentEndEffectorWrench" />
    <connection from="LeftForceControl.OutputEndEffectorPose" to="CImp.CartPositionCommand1_INPORT" />
    <connection from="FK.LeftPosition_OUTPORT" to="LeftForceControl.CurrentEndEffectorPose" />
    <connection from="LeftForceTransformation.OutputEndEffectorWrench" to="LeftForceControl.CurrentEndEffectorWrench" />
-->
    <connection from="C_q_body.Out" to="JTG_body.JointPosition_INPORT" name="q_body" latex="q_{b}" />
    <connection from="JTG_body.JointPositionCommand_OUTPORT" to="JntImp.JointPositionCommand_INPORT" name="cmd_q_body" latex="q_{b,cmd}" />
    <connection from="JTG_body.JointPositionCommand_OUTPORT" to="stConcate.jnt_q_desired_INPORT" name="cmd_q_body" latex="q_{b,cmd}" />
    <connection from="JTG_body.generator_status_OUTPORT" to="stConcate.jnt_status_INPORT" name="gen_st" latex="s_{gen}" />
    <connection from="JTG_body.stiffness_command_OUTPORT" to="JntImp.JointStiffnessCommand_INPORT" name="cmd_stif_body" latex="k_{b,cmd}" />
    <connection from="cmdSplit.jnt_OUTPORT" to="JTG_body.jnt_INPORT" latex="tr_{jnt}" />
    <connection from="C_q_body.Out" to="JntLimit.JointPosition_INPORT" name="q_body" latex="q_{b}" />
    <connection from="C_dq_body.Out" to="JntLimit.JointVelocity_INPORT" name="dq_body" latex="\dot{q}_{b}" />
    <connection from="Mass.MassMatrix_OUTPORT" to="JntLimit.MassMatrix_INPORT" name="M" latex="M" />
    <connection from="JntLimit.JointTorqueCommand_OUTPORT" to="CImp.NullSpaceTorqueCommand_INPORT" name="cmd_t_body" latex="t_{b,cmd}" />
    <connection from="master_component.b_st_OUTPORT" to="safe.status_INPORT" />
    <connection from="C_q_body.Out" to="safe.JointPosition_INPORT" name="q_body" latex="q_{body}" />
    <connection from="safe.JointPositionCommand_OUTPORT" to="JntImp.JointPositionCommand_INPORT" name="cmd_q_body" latex="q_{b, cmd}" />
    <connection from="safe.JointStiffnessCommand_OUTPORT" to="JntImp.JointStiffnessCommand_INPORT" name="cmd_stif_body" latex="k_{b,cmd}" />
    <connection from="idle.cmd_sc_OUTPORT" to="b_cmdConcate.sc_INPORT" />
    <connection from="master_component.b_st_OUTPORT" to="idle.status_INPORT" />
    <connection from="idle.JointTorqueCommand_OUTPORT" to="S_t_body.In" name="cmd_t_body" latex="t_{b,cmd}" />
    <connection from="idle.cmd_hpMotor_q_OUTPORT" to="b_cmdConcate.hpMotor_q_INPORT" name="cmd_q_hp" latex="q_{hp,cmd}" />
    <connection from="idle.cmd_htMotor_q_OUTPORT" to="b_cmdConcate.htMotor_q_INPORT" name="cmd_q_ht" latex="q_{ht,cmd}" />
    <connection from="b_stSplit.test_OUTPORT" to="b_cmdConcate.test_INPORT" />
    <ros_stream port="b_stSplit._OUTPORT" topic="/velma_core_cs/b_st"/>
    <connection from="C_q_all.Out" to="stConcate.q_INPORT" name="q" latex="q" />
    <connection from="C_dq_all.Out" to="stConcate.dq_INPORT" name="dq" latex="\dot{q}" />
    <connection from="cmdSplit.hand_r_OUTPORT" to="b_cmdConcate.rHand_INPORT" />
    <connection from="cmdSplit.hand_l_OUTPORT" to="b_cmdConcate.lHand_INPORT" />
    <connection from="b_stSplit.rHand_OUTPORT" to="stConcate.hand_r_INPORT" />
    <connection from="b_stSplit.lHand_OUTPORT" to="stConcate.hand_l_INPORT" />
    <connection from="b_stSplit.p_OUTPORT" to="stConcate.p_INPORT" />
    <connection from="b_stSplit.f_OUTPORT" to="stConcate.f_INPORT" />
    <ros_stream port="b_cmdConcate.msg_OUTPORT" topic="/velma_core_cs/ve_body_msgs_CommandConcate" />


    <connection from="C_q_head.Out" to="JTG_head.JointPosition_INPORT" name="q_head" latex="q_{h}" />
    <connection from="JTG_head.JointPositionCommand_OUTPORT" to="S_q_head.InputPort" name="cmd_q_head" latex="q_{h,cmd}" />
    <connection from="cmdSplit.head_OUTPORT" to="JTG_head.jnt_INPORT" latex="tr_{head}" />

<!-- this is unnecessary, as the wrist pose is calculated in ROS
    <connection from="FK.LeftPosition_OUTPORT" to="stConcate.lWristPose_INPORT" />
    <connection from="FK.RightPosition_OUTPORT" to="stConcate.rWristPose_INPORT" />-->

<!--
//    <connection from="TGR.Trigger" to="EC.torso.subnode0.DigitalOutput1" />
//    <connection from="TGR.Trigger" to="EC.torso.subnode0.DigitalOutput2" />
#    <connection from="b_stSplit.rHand_q_OUTPORT" to="C_q_all.In2" />
#    <connection from="b_stSplit.lHand_q_OUTPORT" to="C_q_all.In3" />
#    <connection from="b_stSplit.rHand_q_OUTPORT" to="C_dq_all.In2" />
#    <connection from="b_stSplit.lHand_q_OUTPORT" to="C_dq_all.In3" />
#    <connection from="b_stSplit.rArm_t_OUTPORT" to="TorquePubRight.InJointTorque" />
#    <connection from="b_stSplit.rArm_gt_OUTPORT" to="TorquePubRight.InGravityTorque" />
#    <connection from="b_stSplit.lArm_t_OUTPORT" to="TorquePubLeft.InJointTorque" />
#    <connection from="b_stSplit.lArm_gt_OUTPORT" to="TorquePubLeft.InGravityTorque" />
#    <connection from="b_stSplit.lArm_gt_OUTPORT" to="VG.GravTrqLeft" />
#    <connection from="b_stSplit.rArm_gt_OUTPORT" to="VG.GravTrqRight" />
#    <ros_stream port="b_stSplit.rArm_w_OUTPORT" topic="/right_arm/wrench" />
#    <ros_stream port="b_stSplit.lArm_w_OUTPORT" topic="/left_arm/wrench" />
#    <ros_stream port="TJ.Joy_INPORT" topic="/joy" />
#    <ros_stream port="TGR.TriggerStamp" topic="/camera_trigger_stamp" />
#    <connection from="FK.RightPosition_OUTPORT" to="TfPub.In4" />
#    <connection from="FK.LeftPosition_OUTPORT" to="TfPub.In5" />
#    <ros_stream port="RightForceTransformation.ToolGravityParam" topic="/right_arm/tg_param" />
#    <ros_stream port="RightForceTransformation.OutputEndEffectorWrench" topic="/right_arm/transformed_wrench" />
#    <ros_stream port="LeftForceTransformation.ToolGravityParam" topic="/left_arm/tg_param" />
#    <ros_stream port="LeftForceTransformation.OutputEndEffectorWrench" topic="/left_arm/transformed_wrench" />
//    <connection from="RightForceControl.IsSynchronisedIn" to="Irp6otHardwareInterface.IsSynchronised" />
//    <connection from="RightForceControl.GeneratorActiveOut" to="Irp6otHardwareInterface.GeneratorActiveIn" />
#    <ros_stream port="RightForceControl.CurrentFclParam" topic="/right_arm/fcl_param" />
//    <connection from="LeftForceControl.IsSynchronisedIn" to="Irp6otHardwareInterface.IsSynchronised" />
//    <connection from="LeftForceControl.GeneratorActiveOut" to="Irp6otHardwareInterface.GeneratorActiveIn" />
#    <ros_stream port="LeftForceControl.CurrentFclParam" topic="/left_arm/fcl_param" />
//    <connection from="TJ.NullSpaceTorqueCommand_OUTPORT" to="JntLimit.NullSpaceTorqueCommand_INPORT" />
#    <connection from="VG.GravTrq" to="JntLimit.NullSpaceTorqueCommand_INPORT" />
-->
</subsystem>


ros.import("rtt_rosclock");
ros.import("rtt_barrett_hand_controller_msgs");
ros.import("rtt_geometry_msgs");
ros.import("rtt_velma_core_cs_ve_body_msgs");
ros.import("velma_core_cs_ve_body_interface");
ros.import("velma_core_ve_body");
ros.import("rtt_velma_core_ve_body_re_body_msgs");
ros.import("velma_core_ve_body_re_body_interface");

ros.import("eigen_typekit");
ros.import("rtt_std_msgs");
ros.import("port_operations");

ros.import("rtt_control_msgs");
ros.import("lwr_fri");
ros.import("velma_controller");
ros.import("rtt_cartesian_trajectory_msgs");
ros.import("rtt_std_msgs");
ros.import("rtt_tf");
ros.import("velma_sim_gazebo");

//------------------------------------------------------------------------------
//-- Simulation interface
//------------------------------------------------------------------------------

bool useSimulationTime()   { return true; }

TorsoSim.loadService("rosparam");
TorsoSim.rosparam.getAll();

if (!TorsoSim.configure()) then {
    kickOutAll();
}

#setActivityOnCPU("LWRrSim", 0.001, 6, ORO_SCHED_RT, 3)
setActivity("LWRrSim", 0.001, 6, ORO_SCHED_RT)
LWRrSim.loadService("sim_clock_activity")
LWRrSim.loadService("rosparam")
LWRrSim.rosparam.getAll()
LWRrSim.configure()

#setActivityOnCPU("LWRlSim", 0.001, 6, ORO_SCHED_RT, 3)
setActivity("LWRlSim", 0.001, 6, ORO_SCHED_RT)
LWRlSim.loadService("sim_clock_activity")
LWRlSim.loadService("rosparam")
LWRlSim.rosparam.getAll()
LWRlSim.configure()

#setActivityOnCPU("RightHandTactile", 0.025, 6, ORO_SCHED_RT, 3)
setActivity("RightHandTactile", 0, 6, ORO_SCHED_RT)
#RightHandTactile.loadService("sim_clock_activity")
RightHandTactile.loadService("rosparam")
RightHandTactile.rosparam.getAll()
RightHandTactile.configure()

#stream("RightHandTactile.BHPressureState_OUTPORT", ros.comm.topic("/right_hand/BHPressureState"))
#stream("RightHandTactile.calibrate_tactile_sensors_INPORT", ros.comm.topic("/right_hand/calibrate_tactile_sensors"))
#stream("RightHandTactile.set_median_filter_INPORT", ros.comm.topic("/right_hand/set_median_filter"))
#stream("RightHandTactile.tactile_info_OUTPORT", ros.comm.topic("/right_hand/tactile_info_out"))
//connect("RightHandTactile.max_measured_pressure_OUTPORT", "Hand.max_measured_pressure_in", ConnPolicy());

setActivity("LeftHandOptoforce", 0, 6, ORO_SCHED_RT)
LeftHandOptoforce.loadService("rosparam")
LeftHandOptoforce.rosparam.getAll()
LeftHandOptoforce.configure()

// TODO: uncomment
//stream("LeftHandOptoforce.force_0_OUTPORT", ros.comm.topic("/left_hand/optoforce/force_0"))
//stream("LeftHandOptoforce.force_1_OUTPORT", ros.comm.topic("/left_hand/optoforce/force_1"))
//stream("LeftHandOptoforce.force_2_OUTPORT", ros.comm.topic("/left_hand/optoforce/force_2"))

setActivity("RightHand", 0, 6, ORO_SCHED_RT)
RightHand.loadService("rosparam")
RightHand.rosparam.getAll()
RightHand.configure()

setActivity("LeftHand", 0, 6, ORO_SCHED_RT)
LeftHand.loadService("rosparam")
LeftHand.rosparam.getAll()
LeftHand.configure()

// F/T sensors

setActivity("LeftFtSensor", 0, 6, ORO_SCHED_RT)
LeftFtSensor.loadService("rosparam")
LeftFtSensor.rosparam.getAll()
LeftFtSensor.configure()
#stream("LeftFtSensor.rawWrench_OUTPORT", ros.comm.topic("/left_arm/ft_sensor/wrench"))

setActivity("RightFtSensor", 0, 6, ORO_SCHED_RT)
RightFtSensor.loadService("rosparam")
RightFtSensor.rosparam.getAll()
RightFtSensor.configure()
#stream("RightFtSensor.rawWrench_OUTPORT", ros.comm.topic("/right_arm/ft_sensor/wrench"))
#stream("RightFtSensor.fastFilteredWrench_OUTPORT", ros.comm.topic("/right_arm/ft_sensor/wrench_fast"))
#stream("RightFtSensor.slowFilteredWrench_OUTPORT", ros.comm.topic("/right_arm/ft_sensor/wrench_slow"))



loadComponent("bypass","VelmaLowIdleComponent")
setActivity("bypass", 0, 5, ORO_SCHED_RT);
bypass.configure()

loadComponent("safe","VelmaLowSafeComponent");
setActivity("safe", 0, 5, ORO_SCHED_RT);
safe.loadService("rosparam");
safe.rosparam.getAll();
safe.configure();

#
# command
#
connect("VelmaCoreVeBodyReBodyStatusConcate.msg_OUTPORT", "safe.status_INPORT", ConnPolicy());
connect("safe.cmd_OUTPORT", "VelmaCoreVeBodyReBodyCommandConcate.msg_INPORT", ConnPolicy());
connect("safe.sc_OUTPORT", "VelmaCoreCsVeBodyStatusConcate.sc_INPORT", ConnPolicy());

# TODO: connect all ports of VelmaCoreVeBodyReBodyCommandSplit
connect("VelmaCoreVeBodyReBodyCommandSplit.rArm_t_OUTPORT",            "LWRrSim.JointTorqueCommand_INPORT", ConnPolicy());
connect("VelmaCoreVeBodyReBodyCommandSplit.rArmFri_OUTPORT",           "LWRrSim.KRL_CMD_INPORT", ConnPolicy());

connect("VelmaCoreVeBodyReBodyCommandSplit.lArm_t_OUTPORT",            "LWRlSim.JointTorqueCommand_INPORT", ConnPolicy());
connect("VelmaCoreVeBodyReBodyCommandSplit.lArmFri_OUTPORT",           "LWRlSim.KRL_CMD_INPORT", ConnPolicy());

connect("VelmaCoreVeBodyReBodyCommandSplit.tMotor_i_OUTPORT",           "TorsoSim.t_MotorCurrentCommand_INPORT", ConnPolicy())
connect("VelmaCoreVeBodyReBodyCommandSplit.hpMotor_i_OUTPORT",          "TorsoSim.head_pan_motor_current_command_INPORT", ConnPolicy())
connect("VelmaCoreVeBodyReBodyCommandSplit.htMotor_i_OUTPORT",          "TorsoSim.head_tilt_motor_current_command_INPORT", ConnPolicy())
connect("VelmaCoreVeBodyReBodyCommandSplit.hpMotor_q_OUTPORT",          "TorsoSim.head_pan_motor_position_command_INPORT", ConnPolicy())
connect("VelmaCoreVeBodyReBodyCommandSplit.htMotor_q_OUTPORT",          "TorsoSim.head_tilt_motor_position_command_INPORT", ConnPolicy())
connect("VelmaCoreVeBodyReBodyCommandSplit.hpMotor_dq_OUTPORT",         "TorsoSim.head_pan_motor_velocity_command_INPORT", ConnPolicy())
connect("VelmaCoreVeBodyReBodyCommandSplit.htMotor_dq_OUTPORT",         "TorsoSim.head_tilt_motor_velocity_command_INPORT", ConnPolicy())

connect("VelmaCoreCsVeBodyCommandRx.msg_OUTPORT", "bypass.command_INPORT", ConnPolicy())
connect("bypass.command_OUTPORT", "VelmaCoreVeBodyReBodyCommandConcate.msg_INPORT", ConnPolicy())
connect("bypass.sc_OUTPORT", "VelmaCoreCsVeBodyStatusConcate.sc_INPORT", ConnPolicy());

#
# status concate for VelmaCoreCsVeBody
#
connect("LWRrSim.JointPosition_OUTPORT",                    "VelmaCoreCsVeBodyStatusConcate.rArm_q_INPORT", ConnPolicy())
connect("LWRrSim.JointVelocity_OUTPORT",                    "VelmaCoreCsVeBodyStatusConcate.rArm_dq_INPORT", ConnPolicy())
connect("LWRrSim.JointTorque_OUTPORT",                      "VelmaCoreCsVeBodyStatusConcate.rArm_t_INPORT", ConnPolicy())
connect("LWRrSim.GravityTorque_OUTPORT",                    "VelmaCoreCsVeBodyStatusConcate.rArm_gt_INPORT", ConnPolicy())
connect("LWRrSim.CartesianWrench_OUTPORT",                  "VelmaCoreCsVeBodyStatusConcate.rArm_w_INPORT", ConnPolicy())
connect("LWRrSim.MassMatrix_OUTPORT",                       "VelmaCoreCsVeBodyStatusConcate.rArm_mmx_INPORT", ConnPolicy())

connect("RightHand.q_OUTPORT",                              "VelmaCoreCsVeBodyStatusConcate.rHand_q_INPORT", ConnPolicy())
connect("RightHand.status_OUTPORT",                         "VelmaCoreCsVeBodyStatusConcate.rHand_s_INPORT", ConnPolicy())

connect("LWRlSim.JointPosition_OUTPORT",                    "VelmaCoreCsVeBodyStatusConcate.lArm_q_INPORT", ConnPolicy())
connect("LWRlSim.JointVelocity_OUTPORT",                    "VelmaCoreCsVeBodyStatusConcate.lArm_dq_INPORT", ConnPolicy())
connect("LWRlSim.JointTorque_OUTPORT",                      "VelmaCoreCsVeBodyStatusConcate.lArm_t_INPORT", ConnPolicy())
connect("LWRlSim.GravityTorque_OUTPORT",                    "VelmaCoreCsVeBodyStatusConcate.lArm_gt_INPORT", ConnPolicy())
connect("LWRlSim.CartesianWrench_OUTPORT",                  "VelmaCoreCsVeBodyStatusConcate.lArm_w_INPORT", ConnPolicy())
connect("LWRlSim.MassMatrix_OUTPORT",                       "VelmaCoreCsVeBodyStatusConcate.lArm_mmx_INPORT", ConnPolicy())

connect("LeftHand.q_OUTPORT",                               "VelmaCoreCsVeBodyStatusConcate.lHand_q_INPORT", ConnPolicy())
connect("LeftHand.status_OUTPORT",                          "VelmaCoreCsVeBodyStatusConcate.lHand_s_INPORT", ConnPolicy())

connect("TorsoSim.t_MotorPosition_OUTPORT",                 "VelmaCoreCsVeBodyStatusConcate.tMotor_q_INPORT", ConnPolicy())
connect("TorsoSim.t_MotorVelocity_OUTPORT",                 "VelmaCoreCsVeBodyStatusConcate.tMotor_dq_INPORT", ConnPolicy())
connect("TorsoSim.head_pan_motor_position_OUTPORT",         "VelmaCoreCsVeBodyStatusConcate.hpMotor_q_INPORT", ConnPolicy())
connect("TorsoSim.head_pan_motor_velocity_OUTPORT",         "VelmaCoreCsVeBodyStatusConcate.hpMotor_dq_INPORT", ConnPolicy())
connect("TorsoSim.head_tilt_motor_position_OUTPORT",        "VelmaCoreCsVeBodyStatusConcate.htMotor_q_INPORT", ConnPolicy())
connect("TorsoSim.head_tilt_motor_velocity_OUTPORT",        "VelmaCoreCsVeBodyStatusConcate.htMotor_dq_INPORT", ConnPolicy())
connect("RightHandTactile.BHPressureState_OUTPORT",         "VelmaCoreCsVeBodyStatusConcate.rHand_p_INPORT", ConnPolicy())
#connect("lli_lo_test.status_lHand_f_OUTPORT",             "VelmaCoreCsVeBodyStatusConcate.lHand_f_INPORT", ConnPolicy())
# TODO LeftHandOptoforce.force_0_OUTPORT

connect("RightFtSensor.rawWrench_OUTPORT",                  "VelmaCoreCsVeBodyStatusConcate.rFt_rw_INPORT", ConnPolicy())
connect("RightFtSensor.fastFilteredWrench_OUTPORT",         "VelmaCoreCsVeBodyStatusConcate.rFt_ffw_INPORT", ConnPolicy())
connect("RightFtSensor.slowFilteredWrench_OUTPORT",         "VelmaCoreCsVeBodyStatusConcate.rFt_sfw_INPORT", ConnPolicy())
connect("LeftFtSensor.rawWrench_OUTPORT",                   "VelmaCoreCsVeBodyStatusConcate.lFt_rw_INPORT", ConnPolicy())
connect("LeftFtSensor.fastFilteredWrench_OUTPORT",          "VelmaCoreCsVeBodyStatusConcate.lFt_ffw_INPORT", ConnPolicy())
connect("LeftFtSensor.slowFilteredWrench_OUTPORT",          "VelmaCoreCsVeBodyStatusConcate.lFt_sfw_INPORT", ConnPolicy())


#
# status concate for master_component and other components
#
connect("LWRrSim.JointPosition_OUTPORT",                    "VelmaCoreVeBodyReBodyStatusConcate.rArm_q_INPORT", ConnPolicy())
connect("LWRrSim.JointVelocity_OUTPORT",                    "VelmaCoreVeBodyReBodyStatusConcate.rArm_dq_INPORT", ConnPolicy())
connect("LWRrSim.JointTorque_OUTPORT",                      "VelmaCoreVeBodyReBodyStatusConcate.rArm_t_INPORT", ConnPolicy())
connect("LWRrSim.GravityTorque_OUTPORT",                    "VelmaCoreVeBodyReBodyStatusConcate.rArm_gt_INPORT", ConnPolicy())
connect("LWRrSim.CartesianWrench_OUTPORT",                  "VelmaCoreVeBodyReBodyStatusConcate.rArm_w_INPORT", ConnPolicy())
connect("LWRrSim.MassMatrix_OUTPORT",                       "VelmaCoreVeBodyReBodyStatusConcate.rArm_mmx_INPORT", ConnPolicy())
connect("LWRrSim.FRIState_OUTPORT",                         "VelmaCoreVeBodyReBodyStatusConcate.rArmFriIntf_INPORT", ConnPolicy())
connect("LWRrSim.RobotState_OUTPORT",                       "VelmaCoreVeBodyReBodyStatusConcate.rArmFriRobot_INPORT", ConnPolicy())

connect("RightHand.q_OUTPORT",                              "VelmaCoreVeBodyReBodyStatusConcate.rHand_q_INPORT", ConnPolicy())
connect("RightHand.status_OUTPORT",                         "VelmaCoreVeBodyReBodyStatusConcate.rHand_s_INPORT", ConnPolicy())

connect("LWRlSim.JointPosition_OUTPORT",                    "VelmaCoreVeBodyReBodyStatusConcate.lArm_q_INPORT", ConnPolicy())
connect("LWRlSim.JointVelocity_OUTPORT",                    "VelmaCoreVeBodyReBodyStatusConcate.lArm_dq_INPORT", ConnPolicy())
connect("LWRlSim.JointTorque_OUTPORT",                      "VelmaCoreVeBodyReBodyStatusConcate.lArm_t_INPORT", ConnPolicy())
connect("LWRlSim.GravityTorque_OUTPORT",                    "VelmaCoreVeBodyReBodyStatusConcate.lArm_gt_INPORT", ConnPolicy())
connect("LWRlSim.CartesianWrench_OUTPORT",                  "VelmaCoreVeBodyReBodyStatusConcate.lArm_w_INPORT", ConnPolicy())
connect("LWRlSim.MassMatrix_OUTPORT",                       "VelmaCoreVeBodyReBodyStatusConcate.lArm_mmx_INPORT", ConnPolicy())
connect("LWRlSim.FRIState_OUTPORT",                         "VelmaCoreVeBodyReBodyStatusConcate.lArmFriIntf_INPORT", ConnPolicy())
connect("LWRlSim.RobotState_OUTPORT",                       "VelmaCoreVeBodyReBodyStatusConcate.lArmFriRobot_INPORT", ConnPolicy())

connect("LeftHand.q_OUTPORT",                               "VelmaCoreVeBodyReBodyStatusConcate.lHand_q_INPORT", ConnPolicy())
connect("LeftHand.status_OUTPORT",                          "VelmaCoreVeBodyReBodyStatusConcate.lHand_s_INPORT", ConnPolicy())

connect("TorsoSim.t_MotorPosition_OUTPORT",                 "VelmaCoreVeBodyReBodyStatusConcate.tMotor_q_INPORT", ConnPolicy())
connect("TorsoSim.t_MotorVelocity_OUTPORT",                 "VelmaCoreVeBodyReBodyStatusConcate.tMotor_dq_INPORT", ConnPolicy())
connect("TorsoSim.head_pan_motor_position_OUTPORT",         "VelmaCoreVeBodyReBodyStatusConcate.hpMotor_q_INPORT", ConnPolicy())
connect("TorsoSim.head_pan_motor_velocity_OUTPORT",         "VelmaCoreVeBodyReBodyStatusConcate.hpMotor_dq_INPORT", ConnPolicy())
connect("TorsoSim.head_tilt_motor_position_OUTPORT",        "VelmaCoreVeBodyReBodyStatusConcate.htMotor_q_INPORT", ConnPolicy())
connect("TorsoSim.head_tilt_motor_velocity_OUTPORT",        "VelmaCoreVeBodyReBodyStatusConcate.htMotor_dq_INPORT", ConnPolicy())
connect("RightHandTactile.BHPressureState_OUTPORT",         "VelmaCoreVeBodyReBodyStatusConcate.rHand_p_INPORT", ConnPolicy())
#connect("lli_lo_test.status_lHand_f_OUTPORT",             "VelmaCoreVeBodyReBodyStatusConcate.lHand_f_INPORT", ConnPolicy())
# TODO LeftHandOptoforce.force_0_OUTPORT

connect("RightFtSensor.rawWrench_OUTPORT",                  "VelmaCoreVeBodyReBodyStatusConcate.rFt_rw_INPORT", ConnPolicy())
connect("RightFtSensor.fastFilteredWrench_OUTPORT",         "VelmaCoreVeBodyReBodyStatusConcate.rFt_ffw_INPORT", ConnPolicy())
connect("RightFtSensor.slowFilteredWrench_OUTPORT",         "VelmaCoreVeBodyReBodyStatusConcate.rFt_sfw_INPORT", ConnPolicy())
connect("LeftFtSensor.rawWrench_OUTPORT",                   "VelmaCoreVeBodyReBodyStatusConcate.lFt_rw_INPORT", ConnPolicy())
connect("LeftFtSensor.fastFilteredWrench_OUTPORT",          "VelmaCoreVeBodyReBodyStatusConcate.lFt_ffw_INPORT", ConnPolicy())
connect("LeftFtSensor.slowFilteredWrench_OUTPORT",          "VelmaCoreVeBodyReBodyStatusConcate.lFt_sfw_INPORT", ConnPolicy())


TorsoSim.start();
LWRrSim.start();
LWRlSim.start();
RightHandTactile.start();
LeftHandOptoforce.start();
RightHand.start();
LeftHand.start();
LeftFtSensor.start();
RightFtSensor.start();



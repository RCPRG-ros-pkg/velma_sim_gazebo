import("rtt_ros");
import("rtt_roscomm");
import("rtt_rosparam");
require("os")

ros.import("rtt_actionlib");
ros.import("rtt_barrett_hand_controller_msgs");
ros.import("eigen_typekit");
ros.import("rtt_control_msgs");
ros.import("conman");
ros.import("conman_ros");
ros.import("lwr_fri");
ros.import("oro_joint_state_publisher");
ros.import("controller_common");
ros.import("velma_controller");
ros.import("rtt_cartesian_trajectory_msgs");
ros.import("rtt_std_msgs");
ros.import("rtt_tf");
ros.import("internal_space_spline_trajectory_action");
ros.import("internal_space_spline_trajectory_generator");
ros.import("port_operations");
ros.import("velma_sim_gazebo");

//------------------------------------------------------------------------------
//-- Simulation interface
//------------------------------------------------------------------------------

setActivityOnCPU("VelmaSim", 0.001, 6, ORO_SCHED_RT, 3)
VelmaSim.loadService("rosparam")
VelmaSim.rosparam.getAll()
VelmaSim.configure()

setActivityOnCPU("VelmaGazeboRightHandTactile", 0.025, 6, ORO_SCHED_RT, 3)
VelmaGazeboRightHandTactile.loadService("rosparam")
VelmaGazeboRightHandTactile.rosparam.getAll()
VelmaGazeboRightHandTactile.configure()


stream("VelmaGazeboRightHandTactile.BHPressureState_OUTPORT", ros.comm.topic("/right_hand/BHPressureState"))
stream("VelmaGazeboRightHandTactile.calibrate_tactile_sensors_INPORT", ros.comm.topic("/right_hand/calibrate_tactile_sensors"))
stream("VelmaGazeboRightHandTactile.set_median_filter_INPORT", ros.comm.topic("/right_hand/set_median_filter"))
stream("VelmaGazeboRightHandTactile.tactile_info_OUTPORT", ros.comm.topic("/right_hand/tactile_info_out"))
//connect("VelmaGazeboRightHandTactile.max_measured_pressure_OUTPORT", "Hand.max_measured_pressure_in", ConnPolicy());

void start_interface_components() {
    VelmaSim.start();
    VelmaGazeboRightHandTactile.start();
}

string rightHandPosition_INPORT_name()          { return string("VelmaSim.rh_q_INPORT"); }
string rightHandVelocity_INPORT_name()          { return string("VelmaSim.rh_v_INPORT"); }
string rightHandCurrent_INPORT_name()           { return string("VelmaSim.rh_t_INPORT"); }
string rightHandMaxPressure_INPORT_name()       { return string("VelmaSim.rh_mp_INPORT"); }
string rightHandHold_INPORT_name()              { return string("VelmaSim.rh_hold_INPORT"); }
string rightHandStatus_OUTPORT_name()           { return string("VelmaSim.rh_status_OUTPORT"); }
string rightHandJointPosition_OUTPORT_name()    { return string("VelmaSim.rh_q_OUTPORT"); }

string leftHandPosition_INPORT_name()           { return string("VelmaSim.lh_q_INPORT"); }
string leftHandVelocity_INPORT_name()           { return string("VelmaSim.lh_v_INPORT"); }
string leftHandCurrent_INPORT_name()            { return string("VelmaSim.lh_t_INPORT"); }
string leftHandMaxPressure_INPORT_name()        { return string("VelmaSim.lh_mp_INPORT"); }
string leftHandHold_INPORT_name()               { return string("VelmaSim.lh_hold_INPORT"); }
string leftHandStatus_OUTPORT_name()            { return string("VelmaSim.lh_status_OUTPORT"); }
string leftHandJointPosition_OUTPORT_name()     { return string("VelmaSim.lh_q_OUTPORT"); }

string torsoMotorPosition_OUTPORT_name()        { return string("VelmaSim.t_MotorPosition_OUTPORT"); }
string torsoMotorVelocity_OUTPORT_name()        { return string("VelmaSim.t_MotorVelocity_OUTPORT"); }
string torsoMotorCurrentCommand_INPORT_name()   { return string("VelmaSim.t_MotorCurrentCommand_INPORT"); }

## camera trigger

//string torsoMotorPosition_OUTPORT_name()        { return string("TGR.Trigger", "EC.torso.subnode0.DigitalOutput1"); }
//string torsoMotorPosition_OUTPORT_name()        { return string("TGR.Trigger", "EC.torso.subnode0.DigitalOutput2"); }

string headPanMotorPosition_OUTPORT_name()        { return string("VelmaSim.head_pan_motor_position_OUTPORT"); }
string headPanMotorVelocity_OUTPORT_name()        { return string("VelmaSim.head_pan_motor_velocity_OUTPORT"); }
string headPanMotorPositionCommand_INPORT_name()  { return string("VelmaSim.head_pan_motor_position_command_INPORT"); }
string headPanMotorVelocityCommand_INPORT_name()  { return string("VelmaSim.head_pan_motor_velocity_command_INPORT"); }
string headPanMotorCurrentCommand_INPORT_name()   { return string("VelmaSim.head_pan_motor_current_command_INPORT"); }

string headTiltMotorPosition_OUTPORT_name()       { return string("VelmaSim.head_tilt_motor_position_OUTPORT"); }
string headTiltMotorVelocity_OUTPORT_name()       { return string("VelmaSim.head_tilt_motor_velocity_OUTPORT"); }
string headTiltMotorPositionCommand_INPORT_name() { return string("VelmaSim.head_tilt_motor_position_command_INPORT"); }
string headTiltMotorVelocityCommand_INPORT_name() { return string("VelmaSim.head_tilt_motor_velocity_command_INPORT"); }
string headTiltMotorCurrentCommand_INPORT_name()  { return string("VelmaSim.head_tilt_motor_current_command_INPORT"); }

string leftArmJointPosition_OUTPORT_name()        { return string("VelmaSim.l_JointPosition_OUTPORT"); }
string leftArmJointVelocity_OUTPORT_name()        { return string("VelmaSim.l_JointVelocity_OUTPORT"); }
string leftArmJointTorque_OUTPORT_name()          { return string("VelmaSim.l_JointTorque_OUTPORT"); }
string leftArmWrench_OUTPORT_name()               { return string("VelmaSim.l_CartesianWrench_OUTPORT"); }
string leftArmMassMatrix_OUTPORT_name()           { return string("VelmaSim.l_MassMatrix_OUTPORT"); }
string leftArmGravityTorque_OUTPORT_name()        { return string("VelmaSim.l_GravityTorque_OUTPORT"); }
string leftArmJointTorqueCommand_INPORT_name()    { return string("VelmaSim.l_JointTorqueCommand_INPORT"); }
string leftKRLcmd_INPORT_name()                   { return string("VelmaSim.l_KRL_CMD_INPORT"); }
string leftArmRobotState_OUTPORT_name()           { return string("VelmaSim.l_RobotState_OUTPORT"); }
string leftArmFRIState_OUTPORT_name()             { return string("VelmaSim.l_FRIState_OUTPORT"); }

string rightArmJointPosition_OUTPORT_name()       { return string("VelmaSim.r_JointPosition_OUTPORT"); }
string rightArmJointVelocity_OUTPORT_name()       { return string("VelmaSim.r_JointVelocity_OUTPORT"); }
string rightArmJointTorque_OUTPORT_name()         { return string("VelmaSim.r_JointTorque_OUTPORT"); }
string rightArmWrench_OUTPORT_name()              { return string("VelmaSim.r_CartesianWrench_OUTPORT"); }
string rightArmMassMatrix_OUTPORT_name()          { return string("VelmaSim.r_MassMatrix_OUTPORT"); }
string rightArmGravityTorque_OUTPORT_name()       { return string("VelmaSim.r_GravityTorque_OUTPORT"); }
string rightArmJointTorqueCommand_INPORT_name()   { return string("VelmaSim.r_JointTorqueCommand_INPORT"); }
string rightKRLcmd_INPORT_name()                  { return string("VelmaSim.r_KRL_CMD_INPORT"); }
string rightArmRobotState_OUTPORT_name()          { return string("VelmaSim.r_RobotState_OUTPORT"); }
string rightArmFRIState_OUTPORT_name()            { return string("VelmaSim.r_FRIState_OUTPORT"); }


#!/usr/bin/env python

## Script used to unpause the simulation after initialization procedure is complete.
# @ingroup utilities
# @file unpause_on_init
# @namespace scripts.unpause_on_init Script used to unpause the simulation after initialization procedure is complete

# Copyright (c) 2015, Robot Control and Pattern Recognition Group,
# Institute of Control and Computation Engineering
# Warsaw University of Technology
#
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Warsaw University of Technology nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYright HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Author: Dawid Seredynski
#

import roslib
roslib.load_manifest('velma_sim_gazebo')

import rospy
import time
import subsystem_msgs.srv
import std_srvs.srv

from gazebo_msgs.msg import *
from gazebo_msgs.srv import *

if __name__ == '__main__':
    rospy.init_node('unpause_on_init')

    rospy.wait_for_service('/gazebo/set_model_configuration')
    try:
        set_model_configuration = rospy.ServiceProxy('/gazebo/set_model_configuration', SetModelConfiguration)
    except rospy.ServiceException, e:
        print "Service call failed: %s"%e
        exit(1)

    state_snapshot = rospy.get_param('~state_snapshot', None)
    #state_snapshot = 'state_snapshot.txt'

    print "Waiting for service /gazebo/enable_sim"
    rospy.wait_for_service('/gazebo/enable_sim')
    srv_unpause_physics = rospy.ServiceProxy('/gazebo/enable_sim', std_srvs.srv.Empty)

    print "Waiting for service /velma_sim_gazebo/getSubsystemInfo"
    rospy.wait_for_service('/velma_sim_gazebo/getSubsystemInfo')
    srv_info_velma_sim_gazebo = rospy.ServiceProxy('/velma_sim_gazebo/getSubsystemInfo', subsystem_msgs.srv.GetSubsystemInfo)

    print "Waiting for subsystem initialization"
    while True:
        try:
            info_body = srv_info_velma_sim_gazebo()
            if info_body.is_initialized:
                break
        except rospy.service.ServiceException as e:
            print "unpause_on_init exception:", e
            print "retrying..."
        time.sleep(1)

    if state_snapshot is None:
        print 'State snapshot is not provided'
    else:
        print 'Restoring configuration saved in file "' + state_snapshot + '"'

        models_map = {}
        with open(state_snapshot, 'r') as f:
            file_lines = f.readlines()
            for line in file_lines:
                fields = line.split()
                if len(fields) != 3:
                    continue
                model_name = fields[0]
                joint_name = fields[1]
                position = float(fields[2])
                if not model_name in models_map:
                    models_map[model_name] = ([], [])
                models_map[model_name][0].append( joint_name )
                models_map[model_name][1].append( position )

        # set desired configurations for all models
        for model_name in models_map:
            print 'Set configuration for model "' + model_name + '":'
            result = set_model_configuration(model_name, '', models_map[model_name][0], models_map[model_name][1])
            print '  success: "' + str(result.success) + '", status message: "' + result.status_message + '"'

    srv_unpause_physics()
    print "unpaused gazebo"


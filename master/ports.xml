<subsystem_definition>

    <ports>
        <in alias="lo_st"       type="velma_core_ve_body_re_body_msgs::Status"     side="bottom"   ipc="false" />
        <in alias="hi_cmd"      type="velma_core_cs_ve_body_msgs::Command"         side="top"      ipc="true" >
            <trigger min="0.0008" avg="0.001" max="0.002" sim_max="1.0" />
        </in>

        <out alias="lo_cmd"     type="velma_core_ve_body_re_body_msgs::Command"    side="bottom"   ipc="false"/>
        <out alias="hi_st"      type="velma_core_cs_ve_body_msgs::Status"          side="top"      ipc="true"/>
    </ports>

    <errors>
        <err name="R_LWR" />
        <err name="L_LWR" />
        <err name="R_LWR_CMD" />
        <err name="L_LWR_CMD" />
        <err name="STATUS" />
        <err name="STATUS_R_LWR_INVALID" />
        <err name="STATUS_L_LWR_INVALID" />
        <err name="STATUS_R_FT_INVALID" />
        <err name="STATUS_L_FT_INVALID" />
        <err name="STATUS_T_MOTOR_INVALID" />
        <err name="STATUS_HP_MOTOR_INVALID" />
        <err name="STATUS_HT_MOTOR_INVALID" />
        <err name="LWR_NAN_LIM" />
        <err name="COMMAND" />
        <err name="CMD_T_MOTOR_INVALID" />
        <err name="CMD_HP_MOTOR_INVALID" />
        <err name="CMD_HT_MOTOR_INVALID" />
        <err name="CMD_L_ARM_INVALID" />
        <err name="CMD_R_ARM_INVALID" />
        <err name="CMD_R_ARM_NAN" />
        <err name="CMD_L_ARM_NAN" />
        <err name="CMD_R_ARM_LIM" />
        <err name="CMD_L_ARM_LIM" />
        <err name="CMD_T_MOTOR_T_NAN" />
    </errors>

    <predicates>
        <predicate name="rLwrOk" />
        <predicate name="rLwrInCmdState" />
        <predicate name="lLwrOk" />
        <predicate name="lLwrInCmdState" />
        <predicate name="rLwrCmdOk" />
        <predicate name="lLwrCmdOk" />
        <predicate name="tCmdOk" />
        <predicate name="cmdExitSafeState" />
    </predicates>

    <output_scopes>
        <scope name="all" />
    </output_scopes>

    <behaviors>
        <behavior name="safe" is_initial="true"
            init_cond="(not rLwrOk) or (not rLwrInCmdState) or (not lLwrOk) or (not lLwrInCmdState) or (not rLwrCmdOk) or (not lLwrCmdOk) or (not tCmdOk)"
            stop_cond="rLwrOk and lLwrOk and rLwrInCmdState and rLwrCmdOk and lLwrInCmdState and lLwrCmdOk and tCmdOk and cmdExitSafeState"
            err_cond="FALSE" >
            <running_component name="safe" />
            <scope name="all" />
        </behavior>

        <behavior name="transparent" 
            init_cond="rLwrOk and lLwrOk and rLwrInCmdState and rLwrCmdOk and lLwrInCmdState and lLwrCmdOk and tCmdOk and cmdExitSafeState"
            stop_cond="FALSE"
            err_cond="(not rLwrOk) or (not rLwrInCmdState) or (not lLwrOk) or (not lLwrInCmdState) or (not rLwrCmdOk) or (not lLwrCmdOk) or (not tCmdOk)" >
            <running_component name="bypass" />
            <scope name="all" />
        </behavior>

    </behaviors>

<!--    <activity period="0.001" />-->

    <simulation use_ros_sim_clock="false" use_sim_clock="false" trigger_gazebo="true" />

    <no_input_wait cycles="1000" />

    <latched_connections>
        <components first="lo_stConcate" second="safe" />
    </latched_connections>

</subsystem_definition>

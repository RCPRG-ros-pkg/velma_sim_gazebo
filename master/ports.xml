<subsystem_definition>

    <ports>
        <in alias="b_st"    type="velma_core_cs_ve_body_msgs::Status"     side="bottom"   ipc="true" >
            <trigger min="0.0008" avg="0.001" max="0.0012" sim_max="1.0" />
        </in>
        <out alias="b_cmd"  type="velma_core_cs_ve_body_msgs::Command"    side="bottom"   ipc="true"/>

        <in alias="cmd"     type="velma_core_cs_task_cs_msgs::Command"    side="top"      ipc="true" />
        <out alias="st"     type="velma_core_cs_task_cs_msgs::Status"     side="top"      ipc="true"/>
    </ports>

    <errors>
        <err name="COMPONENT" />
        <err name="VE_BODY_SAFE" />
        <err name="VE_BODY_ST_INV" />
    </errors>

    <predicates>
        <predicate name="graphSafe" />
        <predicate name="graphCartImp" />
        <predicate name="graphJntImp" />
        <predicate name="veBodyInSafeState" />
        <predicate name="veBodyInError" />
        <predicate name="veBodyStatusValid" />
        <predicate name="recvCartImpCmd" />
        <predicate name="recvJntImpCmd" />
        <predicate name="recvOneCmd" />
    </predicates>

    <states>
        <state name="idle" is_initial="true" behavior="idle" 
            init_cond="(not PREV_STATE_idle) and ((not veBodyStatusValid) or veBodyInSafeState) "
        />
        <behavior name="idle" 
            stop_cond="veBodyStatusValid and (not veBodyInError) and (not veBodyInSafeState)"
            err_cond="FALSE" >
            <running_component name="idle" />
        </behavior>

        <state name="safe" behavior="safe" 
            init_cond="(not PREV_STATE_safe) and (not veBodyInSafeState) and veBodyStatusValid and (IN_ERROR || PREV_STATE_idle)"
        />
        <behavior name="safe"
            stop_cond="recvOneCmd"
            err_cond="(not veBodyStatusValid) or veBodyInSafeState" >
            <running_component name="safe" />
            <running_component name="Mass" />
            <running_component name="FK" />
            <running_component name="JntImp" />
        </behavior>

        <state name="cart_imp" behavior="cart_imp"
            init_cond="(not PREV_STATE_cart_imp) and (not IN_ERROR) and recvOneCmd and recvCartImpCmd and veBodyStatusValid and (not veBodyInSafeState)"
        />
        <behavior name="cart_imp"
            stop_cond="veBodyStatusValid and recvOneCmd and (not recvCartImpCmd)"
            err_cond="(not graphCartImp) or (not veBodyStatusValid) or (veBodyInSafeState)" >
            <running_component name="CImp" />
            <running_component name="Mass" />
            <running_component name="JntLimit" />
            <running_component name="PoseIntLeft" />
            <running_component name="PoseIntRight" />
            <running_component name="FK" />
        </behavior>

        <state name="jnt_imp" behavior="jnt_imp"
            init_cond="(not PREV_STATE_jnt_imp) and (not IN_ERROR) and recvOneCmd and recvJntImpCmd and veBodyStatusValid and (not veBodyInSafeState)"
        />
        <behavior name="jnt_imp"
            stop_cond="veBodyStatusValid and recvOneCmd and (not recvJntImpCmd)"
            err_cond="(not graphJntImp) or (not veBodyStatusValid) or (veBodyInSafeState)" >
            <running_component name="Mass" />
            <running_component name="TrajectoryGeneratorJoint" />
            <running_component name="FK" />
            <running_component name="JntImp" />
        </behavior>

<!--
        <substates>
            <state name="cart_imp" />
            <state name="jnt_imp" />
            <state name="safe_body" />
        </substates>
        <substates>
            <state name="position_head" />
            <state name="safe_head" />
        </substates>
        <substates>
            <state name="command_lh" />
            <state name="idle_lh" />
        </substates>
        <substates>
            <state name="command_rh" />
            <state name="idle_rh" />
        </substates>
-->
    </states>

    <simulation use_ros_sim_clock="true" use_sim_clock="true" />

</subsystem_definition>
